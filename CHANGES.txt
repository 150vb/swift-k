(02/09/07)

*** Reorganized logging. Log always goes to a file. Console
    gets little stuff unless -verbose or -debug are used.
	
*** Use a unified run id which is used as a prefix for the
    log, the restart log, the provenance graph, and the 
	remote run directories

(02/08/07)

*** Added option to always transfer Kickstart records

*** Improved error handling for compilation of SwiftScript code

(02/07/07)

*** Added Kickstart support (optional)

*** Added support for GLOBUS profiles in the site catalog

*** Updated error translations to include a pointer to the
    Kickstart info if available

(02/05/07)

*** Renamed a few things to swift, including:
    - vdl2.properties -> swift.properties
	- ~/.vdl2 -> ~/.swift (the old config is still read though)
	- the log4j "class" for things in Karajan (vdl2 -> swift)
	- vdlrun -> swift
	
*** swift (vdlrun) will also work with .dtm files now, and compile
    them on the fly.
	
*** Most of the throttle parameters are now settable through 
    swift.properties
	
*** Made some preliminary (and incomplete) changes towards integrating
    kickstart.

(02/02/07)

*** Renamed a few mappers to better reflect the mapper functionalities.

*** Added warnings mechanism

*** No more Karajan stack traces in errors (only simple chained messages).
    Those stack traces belong to the logging domain
	
*** Capture cleanup problems and print them as warnings

*** Added a few more error translation
 
(01/30/07)

*** Fixed vdlc to return a non-zero exit code when text->xml conversion
    fails.

(01/28/07)

*** Added support for non-standard attributes on the GLOBUS
    prefix in tc.data.

(01/18/07)

*** Fixed an issue with dependent mappers and arrays

*** Fixed the concurrent mapper

(01/12/07)

*** Added mapping dependencies.

(01/06/07)

*** Added a cache around the Pegasus TC file implementation.

*** Added vdl:log as a wrapper around log4j.

*** Fixed an issue in the cleanup with the same file being
    deleted multiple times concurrently.


(01/04/07)

*** Added a simple clustering mechanism for small jobs.

*** Added a "-dryrun" argument to vdlrun. If graph generation 
    is enabled, this should produce a graph without running
	any actual jobs.
	
*** Fixed an issue with caching where a file could have
    been purged more than once

(01/01/07)

*** Modified AbstractFileMapper to expose local variables as protected

*** Added a RegularExpressionMapper to do file name conversion based on regexp

*** Added a DirectoryMapper to map a list of files from a directory as an array

*** Added a CSVMapper to map a CSV (Comma-Separated Values) file into a logical structure

(12/30/06)

*** A new vdlrun that is specific to VDL2.

*** Added an error translator (based on regular expressions)
    that can be used to provide improved error messages
	
*** Added a lazy errors mode in which errors in application
    execution are aggregated and reported only once at the
	end

*** Added provenance graph generation

*** Added a control mechanism for managing remote storage
    usage
	
*** Cleanups


------------------------- 0 rc 3 ---------------------------

(12/28/06)

*** The heuristics (in CoG) used to detect if a task can ever
    run (due to constraints as opposed to temporary load 
	conditions) were broken and the issue was fixed.

(12/23/06)
------------------------- 0 rc 2 ---------------------------

*** svn copy is broken so I'm noting the revision here: 115

(12/14/06)

*** Fixed the default mapper to be concurrent_mapper

*** Added passing of tc.data profiles to the job (e.g
    user-defined environment variables, jobtype, count, etc.)

------------------------- 0 rc 1 ---------------------------
(12/07/06)

*** Added dynamic loading of the TC file

*** Added cleanup which is done at the end of the
    whole run

(12/06/06)

*** Moved to CI SVN

*** Added tests directory

(11/22/06)

*** Changed to a pure Karajan adaptive scheduler instead
    of a Pegasus site selector
	
*** Added "client-side-caching" of remote files

*** Added a basic wrapper to capture exit codes and do other
    work before and after executing the job
