(11/23/07)
new parameter, execution.retries to specify th number of time a job
will be retried if it fails (giving a maximum of 1 + execution.retries
attempts at execution)

*** Added filesystem site catalog element. Looks like 'execution' and
    allows, for example, SSH to be used for remote filesystem access.

(11/20/07)

*** Many unused fields in the sites catalog, sites.xml, are now optional.

*** Nested statement blocks are no longer supported. These saw little use
    and were buggy.

(11/01/07)

*** Concurrent mapper now generates filenames in a relatively deep directory
    hierarchy in order to reduce the number of files in each directory.
    There is a (hard-coded) parameter which determines how many files and
    subdirectories will be permitted at each level. This parameter is set
    to 25.

*** move various job related directories into subdirs on site-side.
    at present, the subdirs are named by a single digit directory.

(10/31/07)

*** Added an external mapper to allow invoking a script to do the
    actual mapping

(10/08/07)

*** Added readData function

(10/03/07)

*** Profile names/keys in tc.data are now case insensitive

(10/02/07)

*** Swift 0.3 release candidate 1 built from swift svn r1312, cog r1769

(09/28/07)

*** Clustering is now disabled by default.

*** Over the past week, a number of changes have been made to the logging
    output of Swift to make it richer. This is likely to break existing
    log processing code.

(09/19/07)

*** Subtle changes to the behaviour of AbstractFileMapper and its subclasses
    (primarily any of the mappers that take prefix, suffix or location
    parameters). The behaviour of prefixes and suffixes was not consistent
    between forward and reverse mapping - this has been made more consistent.
    Prefixes are now added when mapping directly as strings, rather than
    passing them through the path component mapping code first. Handling of
    separators between fields is slightly changed to accomodate this - a
    special case for the first separator is removed. Detection of the
    types of fields/indices in a path is now done using Path.Entry methods
    rather than guessing based on the first character of the field name.

*** Added lots of debug logging to AbstractFileMapper

(09/18/07)

*** Add a basic iterate {} language construct, and an @extractint function
    that can be used with it.

*** Add a @regexp language function which provides more regular expression
    functionality than is provided by @strcut. This is intended to allow
    the regular expression mapper to be removed (with uses of it replaced
    with the single file mapper and the @regexp function)

(09/13/07)

*** Changed lazy error default from true to false. This affect how
    Swift handles workflows when an error occurs. See the userguide
    for further details.

(09/10/07)

*** Removed ability to specify type of index variable in foreach loops. This
    type was never checked. Any programs which specify the type in a foreach
    statement will need a code modification to remove that type specification.
    Making such a change will not modify workflow behaviour.

(09/08/07)

*** Changed the way arguments are passed to the wrapper. This
    should be more resilient to broken middleware that doesn't
    properly quote arguments.

(09/04/07)

*** Updated wrapper to be more thorough at diagnosing problems.

(08/29/07)

*** Moved @arg to swiftscript namespace/package

*** @filenames disappeared at some point in time. It is back.

*** Fixed some issues with paths returned by fringePaths being
    parsed into the wrong things. It points out that one should 
    be careful about methods typically used to get some human 
    readable representation of data (such as toString()) being 
    relied on to provide any kind of functional consistency.

(08/28/07)

*** Added throttle.score.job.factor to swift.properties (the functionality
    was previously available by manually hacking scheduler.xml)
    
*** Throttle options now accept "off" as a valid value

*** Put @arg back in

*** Changes the configuration to allow loading a specific file even
    if the defaults cannot be found.
    
*** Added PBS and dCache providers as dependencies

*** Typechecks on arrays would fail (this was introduced by the type
    system changes). Fixed.
    
*** Assignments from integer[] to float[] should not fail for type
    reasons (nor should passing an integer[] for a float[] fail the
    typecheck).

(08/23/07)

*** A few changes to the way types work. Whether something is an array
    or not is part of the type now.
    
*** Cleanups to the way things get stored and mappers

*** It's not necessary to manually add task handlers any more. All the
    available ones are added automatically

(08/16/07)

*** A different site catalog element <execution> that fills a similar role
    to the existing <jobmanager> element with a syntax more sympathetic to
    submitting via non-GRAM submission systems.

(07/31/07)

*** Prototype structured_regexp_mapper for performing a regexp transformation
    on the filenames of one dataset to produce another dataset with the
    same structure but different leaf filenames.

(07/30/07)

*** All simple types are now passed around inside of DSHandle objects,
    instead of sometimes inside DSHandles and sometimes as rawer Java
    objects.

*** Swift operators now implemented in their own class, rather than using
    the Karajan implementation.

*** There are now two division operators, / and %/ of which the first (/)
    returns a floating point value and %/ returns an integer value.
    The mod operator is relabelled %% instead of %.
    
*** Mappers can now map files on remote sites (use protocol://host/path)
    for file name(s), and the engine can actually stage things in and out
    from/to arbitrary locations
    
*** Moved some path manipulation function to Java

(07/29/07)

*** Use /dev/urandom by default on UNIX platforms to avoid large
    delays at start-up (and Yoya knows when else). It will lower the
    security of anything that relies on java.security.SecureRandom 
    for RNG, but there is no nice way to initialize different SecureRandom
    instances with different seed generators.

(07/28/07)

*** Removed break; statement from the language. It was previously unimplemented
    and acted as a no-op. Any code which now does not compile can be made to
    compile by removing the break statements. No other changes should be
    necessary, and no behavioural changes should result.

(07/19/07)

*** Swift 0.2 release made from Swift SVN r915 and CoG SVN r1658

(05/21/07)

*** Add a mapper, array_mapper, which maps from a string array of filenames.
    This was requested in bug 27.

(04/27/07)

*** Fixed a deadlock in the remote caching code.

(04/12/07)

*** Marker types (that is, types with no content) can now be specified without
    an empty {} block. So what was previous written as:

      type imagefile {};

    can now be written as

      type imagefile;

(04/11/07)

*** CSV mapper will now take commas as a field separator (in addition to the
    existing behaviour of space and tab)

(03/23/07)

*** Fixed -resume

*** Fixed code dealing with command line arguments

(03/16/07)

*** Labels in graphs are quoted now

(03/12/07)

*** Cache remote directory structure creation.

(03/03/07)

*** Moved job directory creation to the wrapper

(03/03/07)

*** The default values for mapping parameters handling below
    did not allow implementations to get the value of an 
	optional parameter by checking if it's not null. This can
	now be done by specifying null as a default value.

(03/02/07)

*** Added log message to print full stack trace of exceptions
    that cause Swift to fail
	
*** Better handling of default values for mapping parameters, 
    and better handling of mapping parameter errors.

(03/01/07)

*** Fixed @arg.

(02/19/07)

*** Fixed a race in the cache

(02/16/07)

*** Fixed stdin issue (bug #19)

*** Fixed an issue with vdl:cacheAndLockFile considering files for 
    which the transfers failed as being actually cached.

(02/14/07)

*** Print usage  and exit instead of a nasty exception if the input 
    file does not exist (bug #15)

(02/13/07)

*** Ongoing parser changes

*** Make sure /bin and /usr/bin are added to the path in the
    wrapper.
	
*** When there's a NPE or CCE in an exception chain that causes the
    execution to fail, the full stack trace is printed.

(02/11/07)

*** SwiftScript syntax change: The function invocation (i=q)=f(1) must 
    be written with the () parentheses surrounding the return variables.
    Previously, the parentheses were optional, and the same could be written
    as i=q=f(1); This is no longer the case.

(02/10/07)

*** On-going parser changes primarily aimed at producing more user-friendly
    syntax errors but also including these syntax changes:
      - parser no longer recognises vestigial for(;;) construct
      - parser allows type declarations and other top level statements
        (aside from namespace declarations) to be mixed together. Previously,
        all type declarations had to occur before other statements.

(02/09/07)

*** Reorganized logging. Log always goes to a file. Console
    gets little stuff unless -verbose or -debug are used.
	
*** Use a unified run id which is used as a prefix for the
    log, the restart log, the provenance graph, and the 
	remote run directories
	
*** Hmm. Did I mess up the dates on the changelog?

*** Added default properties that work in case
    swift/etc/swift.properties is missing some.

(02/08/07)

*** Added option to always transfer Kickstart records

*** Improved error handling for compilation of SwiftScript code

(02/07/07)

*** Added Kickstart support (optional)

*** Added support for GLOBUS profiles in the site catalog

*** Updated error translations to include a pointer to the
    Kickstart info if available

(02/05/07)

*** Renamed a few things to swift, including:
    - vdl2.properties -> swift.properties
	- ~/.vdl2 -> ~/.swift (the old config is still read though)
	- the log4j "class" for things in Karajan (vdl2 -> swift)
	- vdlrun -> swift
	
*** swift (vdlrun) will also work with .dtm files now, and compile
    them on the fly.
	
*** Most of the throttle parameters are now settable through 
    swift.properties
	
*** Made some preliminary (and incomplete) changes towards integrating
    kickstart.

(02/02/07)

*** Renamed a few mappers to better reflect the mapper functionalities.

*** Added warnings mechanism

*** No more Karajan stack traces in errors (only simple chained messages).
    Those stack traces belong to the logging domain
	
*** Capture cleanup problems and print them as warnings

*** Added a few more error translation
 
(01/30/07)

*** Fixed vdlc to return a non-zero exit code when text->xml conversion
    fails.

(01/28/07)

*** Added support for non-standard attributes on the GLOBUS
    prefix in tc.data.

(01/18/07)

*** Fixed an issue with dependent mappers and arrays

*** Fixed the concurrent mapper

(01/12/07)

*** Added mapping dependencies.

(01/06/07)

*** Added a cache around the Pegasus TC file implementation.

*** Added vdl:log as a wrapper around log4j.

*** Fixed an issue in the cleanup with the same file being
    deleted multiple times concurrently.


(01/04/07)

*** Added a simple clustering mechanism for small jobs.

*** Added a "-dryrun" argument to vdlrun. If graph generation 
    is enabled, this should produce a graph without running
	any actual jobs.
	
*** Fixed an issue with caching where a file could have
    been purged more than once

(01/01/07)

*** Modified AbstractFileMapper to expose local variables as protected

*** Added a RegularExpressionMapper to do file name conversion based on regexp

*** Added a DirectoryMapper to map a list of files from a directory as an array

*** Added a CSVMapper to map a CSV (Comma-Separated Values) file into a logical structure

(12/30/06)

*** A new vdlrun that is specific to VDL2.

*** Added an error translator (based on regular expressions)
    that can be used to provide improved error messages
	
*** Added a lazy errors mode in which errors in application
    execution are aggregated and reported only once at the
	end

*** Added provenance graph generation

*** Added a control mechanism for managing remote storage
    usage
	
*** Cleanups


------------------------- 0 rc 3 ---------------------------

(12/28/06)

*** The heuristics (in CoG) used to detect if a task can ever
    run (due to constraints as opposed to temporary load 
	conditions) were broken and the issue was fixed.

(12/23/06)
------------------------- 0 rc 2 ---------------------------

*** svn copy is broken so I'm noting the revision here: 115

(12/14/06)

*** Fixed the default mapper to be concurrent_mapper

*** Added passing of tc.data profiles to the job (e.g
    user-defined environment variables, jobtype, count, etc.)

------------------------- 0 rc 1 ---------------------------
(12/07/06)

*** Added dynamic loading of the TC file

*** Added cleanup which is done at the end of the
    whole run

(12/06/06)

*** Moved to CI SVN

*** Added tests directory

(11/22/06)

*** Changed to a pure Karajan adaptive scheduler instead
    of a Pegasus site selector
	
*** Added "client-side-caching" of remote files

*** Added a basic wrapper to capture exit codes and do other
    work before and after executing the job
