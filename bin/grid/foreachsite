# Default settings:

resource=work # fork or work(er)

# FIXME: test for valid proxy

# Usage: foreachsite [-resource fork|worker ] scriptname

usage="$0 foreachsite [-resource fork|worker ] scriptname"

# Process command line arguments

while [ $# -gt 0 ]; do
  case $1 in
    -resource) resource=$2; shift 2 ;;
    -*) echo $usage 1>&2
        exit 1 ;;
    *) scriptparam=$1
       scriptpath=$(cd $(dirname $scriptparam); echo $(pwd)/$(basename $scriptparam)) ; shift 1 ;;
  esac
done

if [ _$scriptparam = _ ]; then
  echo $usage 1>&2
  exit 1
fi

rundir=$(mktemp -d run.XX)
cd $rundir

echo Running foreachsite: resource=$resource script=$scriptparam rundir=$rundir

# swift-osg-ress-site-catalog --engage-verified --condor-g >osg.xml
swift-osg-ress-site-catalog --engage  --condor-g >osg.xml

for jobmanager in $(grep gridRes osg.xml | sed -e 's/^.* //' -e 's/<.*//' ); do
  ( sitename=$(echo $jobmanager | sed -e 's,/.*,,')  # strip off batch jobmanager /jobmanager, leaving site name
    mkdir $sitename
    cd $sitename
    if [ $resource = fork ]; then
      resname=$sitename
    else
      resname=$jobmanager
    fi
    cat >condor.sub <<END
#jobmanger=$jobmanager
#sitename=$sitename
#resname=$resname
universe = grid
grid_resource = gt2 $resname
stream_output = False
stream_error  = False
Transfer_Executable = True
output = $(pwd)/submit.stdout
error = $(pwd)/submit.stderr
log = $(pwd)/submit.log

remote_initialdir = /tmp
executable = $scriptpath
#arguments = "-c" "python -V" # fails!
notification = Never
leave_in_queue = False
queue

END

    condor_submit condor.sub
  )
done
