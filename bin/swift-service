#!/bin/bash 
#
# Allows a user to start, stop, name, and view the status of coaster services
#

export SWIFT_BIN="$( cd "$( dirname "$0" )" && pwd )"
export WORKER="$SWIFT_BIN/worker.pl"
export COASTER_SERVICE="$SWIFT_BIN/coaster-service"
export LOG="start-coaster-service.log"
export SERVICE_DIR="$HOME/.swift/service"
mkdir -p "$SERVICE_DIR" || crash "Unable to create $SERVICE_DIR"

# Report a problem and exit
crash()
{
   MSG=$1
   echo ${MSG} >&2
   exit 1
}

# Print usage
usage()
{
   crash "$( basename $0 ) [ -start | -stop | -status | -xml | -debug ] [ -name servicename ]"
}

# Wait for a file ($1) to be created, up to given amount of time ($2)
wait_for_file()
{
   FILE=$1
   TIME=$2
   count=0
   while [ ! -s "$FILE" ]; do
      sleep 1
      (( count += 1 ))
      if [ $count -ge $TIME ]; then
         crash "Timed out waiting for coaster port file $FILE"
      fi
   done
}

# Write command to log, run command, wait for completion
run_command()
{
   command="$@"
   echo "Running command $command" >> $LOG
   $command 2>&1 | tee -a $LOG
}

# Write command to log, run in background, return PID
run_command_bg()
{
   command="$@"
   echo "Running background command $command" >> $LOG
   $command >> $LOG 2>&1 &
   echo $!
}

# Given a name, stop a single service
stop_single_service()
{
   SERVICENAME=$1
   if [ ! -d "$SERVICE_DIR/$SERVICENAME" ]; then
      crash "Unable to find service called $SERVICENAME"
   fi

   if [ ! -f "$SERVICE_DIR/$SERVICENAME/pid" ]; then
      crash "Error: Unable to find pid file for service $SERVICENAME"
   fi

   echo Stopping service $SERVICENAME...
   PID=$( cat $SERVICE_DIR/$SERVICENAME/pid )
   PID_COMM=$( ps -p $PID -o comm|sed 1D 2>/dev/null )

   # Kill child processes of $PID
   ps -u $USER -o "pid,ppid"|sed 1d | while read PROC
   do
      PROC_PID=$( echo $PROC | awk '{print $1}' )
      PROC_PPID=$( echo $PROC | awk '{print $2}' )
      if [ $PROC_PPID == $PID ]; then
         run_command kill $PROC_PID &>/dev/null
      fi
   done

   if [ -z "$PID_COMM" ]; then
      PID_COMM="$PID"
   fi 

   run_command kill $PID &>/dev/null
   rm -rf $SERVICE_DIR/$SERVICENAME
}

# Print a list of services
get_services()
{
   ls -d $SERVICE_DIR/*/ 2>/dev/null
}

# Stop the coaster service
stop_service()
{
   if [ -n "$NAME" ]; then
      stop_single_service $NAME
   else
      count=0
      for service in $( get_services )
      do
         service=$( basename $service )
         stop_single_service $service
         count=$((count+1))
      done
      if [ "$count" == 0 ]; then
         crash "No services found to stop"
      fi
   fi
}

# Start coaster service
start_service()
{ 
   # Figure out naming, create directory for this service
   if [ -z "$NAME" ]; then
      NAME=$( ls -1d $SERVICE_DIR/*/ 2>/dev/null | wc -l )
      NAME=$( expr $NAME + 1 )
      NAME="service-$NAME"
   fi

   COASTER_DIR="$SERVICE_DIR/$NAME"
   if [ -d "$COASTER_DIR" ]; then
      crash "Service named $NAME already exists!"
   fi
   mkdir $COASTER_DIR || crash "Unable to create $COASTER_DIR"
   LOG="$COASTER_DIR/swift-service.log"

   # Import settings
   if [ -f "$CMDLN_CONF" ]; then
      CONFIG_FILE=$CMDLN_CONF
   elif [ -f "coaster-service.conf" ]; then
      CONFIG_FILE="coaster-service.conf"
   fi

   echo -e "Starting Swift service..\n"
   if [ -f "$CONFIG_FILE" ]; then
      echo "Configuration: $CONFIG_FILE"
      run_command source $CONFIG_FILE
   fi

   if [ -z "$IPADDR" ]; then
      if [ "$SSH_TUNNELING" == "yes" ]; then
         IPADDR=localhost
      elif [ -n "$GLOBUS_HOSTNAME" ]; then
         IPADDR=$GLOBUS_HOSTNAME
      else
         IPADDR="127.0.0.1"
      fi
   fi

   # Verify we can find coaster service
   if [ ! -x "$COASTER_SERVICE" ]; then
      crash "Unable to find $COASTER_SERVICE!"
   fi

   if [ -z "$TMPDIR" ]; then
      TMPDIR=$PWD
   fi

   # Create files for storing port info, if needed
   if [ -z "$LOCAL_PORT" ]; then
      LOCAL_PORT_FILE=$( run_command mktemp $TMPDIR/XXXXXX )
   fi

   if [ -z "$SERVICE_PORT" ]; then
      SERVICE_PORT_FILE=$( run_command mktemp $TMPDIR/XXXXXX )
   fi

   # Check values in configuration file to determine how we should start coaster-service
   PID=""
   if [ -z "$SERVICE_PORT" ] && [ -z "$LOCAL_PORT" ]; then
      PID=$( run_command_bg $COASTER_SERVICE -nosec -portfile $SERVICE_PORT_FILE -localportfile $LOCAL_PORT_FILE -passive )
   elif [ -n "$SERVICE_PORT" ] && [ -z "$LOCAL_PORT" ]; then
      PID=$( run_command_bg $COASTER_SERVICE -nosec -port $SERVICE_PORT -localportfile $LOCAL_PORT_FILE -passive )
   elif [ -z "$SERVICE_PORT" ] && [ -n "$LOCAL_PORT" ]; then
      PID=$( run_command_bg $COASTER_SERVICE -nosec -portfile $SERVICE_PORT_FILE --localport $LOCAL_PORT -passive )
   elif [ -n  "$SERVICE_PORT" ] && [ -n "$LOCAL_PORT" ]; then
      PID=$( run_command_bg $COASTER_SERVICE -nosec -port $SERVICE_PORT -localport $LOCAL_PORT -passive )
   fi
   echo $PID >> $COASTER_DIR/pid

   # If waiting on port files to be created, wait for files to be created
   if [ -z "$SERVICE_PORT" ]; then
      wait_for_file $SERVICE_PORT_FILE 60
   fi

   if [ -z "$LOCAL_PORT" ]; then
      wait_for_file $LOCAL_PORT_FILE 60
   fi

   # Determine SERVICE_PORT
   if [ -z "$SERVICE_PORT" ]; then
      if [ ! -f "$SERVICE_PORT_FILE" ]; then
         crash "Unable to determine SERVICE_PORT!"
      fi
      SERVICE_PORT=$( cat $SERVICE_PORT_FILE )
      rm $SERVICE_PORT_FILE
   fi

   # Determine LOCAL_PORT
   if [ -z "$LOCAL_PORT" ]; then
      if [ ! -f "$LOCAL_PORT_FILE" ]; then
         crash "Unable to determine LOCAL_PORT!"
      fi
      LOCAL_PORT=$( cat $LOCAL_PORT_FILE )
      rm $LOCAL_PORT_FILE
   fi

   echo Name: $NAME
   echo Service port: $SERVICE_PORT
   echo Local port: $LOCAL_PORT
   echo Worker script: $WORKER
 
   # Generate sites.xml
   export EXECUTIONURL="http://$IPADDR:$SERVICE_PORT"
   export WORKERURL=$( java -jar $SWIFT_BIN/listcoasterurls.jar $LOCAL_PORT )

   echo Execution URL: $EXECUTIONURL
   echo Worker URL: $WORKERURL
   echo $EXECUTIONURL >> $COASTER_DIR/execution.url
   echo $WORKERURL >> $COASTER_DIR/worker.url
   echo $WORKER >> $COASTER_DIR/worker.path

   GENSITES_ARGS=""
   if [ -f "$CONFIG_FILE" ]; then
      GENSITES_ARGS=" -p $CONFIG_FILE "
   fi

   if [ -f "gensites.template" ]; then
      GENSITES_ARGS=" $( cat gensites.template ) "
   else
      GENSITES_ARGS=" persistent-coasters "
   fi

   # Give defaults to gensites variables if needed
   if [ -z "$JOBSPERNODE" ]; then
      export JOBSPERNODE=1
   fi
   if [ -z "$JOBTHROTTLE" ]; then
      export JOBTHROTTLE=0
   fi
   if [ -z "$WORK" ]; then
      export WORK=/tmp
   fi
   gensites -n $NAME $GENSITES_ARGS > $COASTER_DIR/sites.xml
   echo
}

# Display status of services
display_status()
{
   count=0
   services=""

   if [ -n "$NAME" ]; then
      services=$SERVICE_DIR/$NAME
      if [ ! -d "$services" ]; then
         crash "Service $NAME does not exist"
      fi
   else
      services=$( get_services )
   fi

   for service in $services
   do
      echo -e "\nName: $(basename $service )"
      PID=$( cat $service/pid )
      echo "PID: $PID"

      ps -p $PID > /dev/null 2>&1
      if [ "$?" -eq 0 ]; then
         echo Status: Running
      else
         echo Status: Failed
      fi

      echo "Service port: $( cat $service/execution.url )"
      echo "Local port: $( cat $service/worker.url )" 
      echo "Worker script: $( cat $service/worker.path )"    

      count=$((count+1))
   done
   if [ "$count" -gt 0 ]; then
      echo
   else
      echo "No services found"
   fi
}

# Generate XML
generate_xml()
{
   count=0
   echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
   echo -e "<config xmlns=\"http://www.ci.uchicago.edu/swift/SwiftSites\">\n"

   services=""
   if [ -n "$NAME" ]; then
      services=$SERVICE_DIR/$NAME
   else
      services=$( get_services )
   fi

   for service in $services
   do
      cat $service/sites.xml | grep -v "<?xml" | grep -v "<config" | grep -v "</config>"
      echo
   done

   echo "</config>"

}

# Display debug info
display_debug()
{
   SERVICES=$( get_services )
   for service in $SERVICES
   do
      echo Displaying debug information for service: $( basename $service )
      cat $service/swift-service.log
   done
}

# Parse command line arguments
START=0; STOP=0; STATUS=0; XML=0; DEBUG=0
while [ $# -gt 0 ]; do
   case $1 in
      -conf) CMDLN_CONF=$2; shift 2;;
      -start) START=1; shift;;
      -stop) STOP=1; shift;;
      -status) STATUS=1; shift;; 
      -name) NAME=$2; shift 2;;
      -xml) XML=1; shift;;
      -debug) DEBUG=1; shift;;
      *) echo "Do not recognize command line option: $1" 1>&2; usage;;
   esac
done

if [ $(($START+$STOP+$STATUS+$XML+$DEBUG)) != 1 ]; then
   usage
fi

if [ "$START" == 1 ]; then
   start_service
elif [ "$STOP" == 1 ]; then
   stop_service
elif [ "$STATUS" == 1 ]; then
   display_status
elif [ "$XML" == 1 ]; then
   generate_xml
elif [ "$DEBUG" == 1 ]; then
   display_debug
fi
