#!/bin/bash 
#
# Allows a user to start, stop, name, and view the status of coaster services
#

# :set debug

export SWIFT_BIN="$( cd "$( dirname "$0" )" && pwd )"
export WORKER="$SWIFT_BIN/worker.pl"
export COASTER_SERVICE="$SWIFT_BIN/coaster-service"
export LOG="swift-service.log"
export SERVICE_DIR="$HOME/.swift/service"
export IPADDR=127.0.0.1

mkdir -p "$SERVICE_DIR" || crash "Unable to create $SERVICE_DIR"

# Report a problem and exit
crash()
{
   MSG=$1
   echo ${MSG} >&2
   exit 1
}

# Print usage
usage()
{
   crash "$( basename $0 ) [ -start | -stop | -status | -xml | -debug ] [ -name servicename ] [ -serviceport port ] [ -workerport port ]"
}

verify_files_exist()
{
   for file in "$@"
   do
      if [ ! -f "$file" ]; then
         crash "File $file does not exist. Service is in a corrupt state, please stop and restart"
      fi
   done
}

# Wait for a file ($1) to be created, up to given amount of time ($2)
wait_for_file()
{
   FILE=$1
   TIME=$2
   count=0
   while [ ! -s "$FILE" ]; do
      sleep 1
      (( count += 1 ))
      if [ $count -ge $TIME ]; then
         crash "Timed out waiting for coaster port file $FILE"
      fi
   done
}

# Return current timestamp
get_timestamp()
{
   date +"%b %d %H:%M:%S "
}

# Write command to log, run command, wait for completion
run_command()
{
   command="$@"
   echo "$( get_timestamp ) Running command $command" >> $LOG
   $command 2>&1 | tee -a $LOG
}

# Write command to log, run in background, return PID
run_command_bg()
{
   command="$@"
   echo "$( get_timestamp ) Running background command $command" >> $LOG
   $command >> $LOG 2>&1 &
   echo $!
}

# Kill all children processes
nicely_kill_all_children()
{
   PID=$1
   ps -u $USER -o "pid,ppid"|sed 1d | while read PROC
   do
      PROC_PID=$( echo $PROC | awk '{print $1}' )
      PROC_PPID=$( echo $PROC | awk '{print $2}' )
      if [ $PROC_PPID == $PID ]; then
         nice_kill $PROC_PID 5
      fi
   done
   nice_kill $PID 5
}

# Try to nicely kill a process before giving it a SIGKILL
nice_kill()
{
   pid=$1
   grace=$2
   run_command kill $pid &>/dev/null

   count=0
   while ps -p $pid &>/dev/null
   do
      sleep 1
      (( count++ ))
      if [ "$count" -ge "$grace" ]; then
         run_command kill -9 $pid
      fi  
   done  
}

# Given a name, stop a single service
stop_single_service()
{
   SERVICENAME=$1
   echo Stopping service $SERVICENAME
   if [ ! -d "$SERVICE_DIR/$SERVICENAME" ]; then
      crash "Unable to find service called $SERVICENAME"
   fi
   LOG="$SERVICE_DIR/$SERVICENAME/swift-service.log"

   if [ -f "$SERVICE_DIR/$SERVICENAME/pid" ]; then
      PID=$( cat $SERVICE_DIR/$SERVICENAME/pid )
      nicely_kill_all_children $PID
   fi

   if [ -f "$SERVICE_DIR/$SERVICENAME/workers.pid" ]; then
      PID=$( $SERVICE_DIR/$SERVICENAME/workers.pid )
      nicely_kill_all_children $PID
   fi

   rm -rf $SERVICE_DIR/$SERVICENAME
}

# Print a list of services
get_services()
{
   find $SERVICE_DIR -mindepth 1 -maxdepth 1 -type d 2>/dev/null | sort -n
}

# Stop the coaster service
stop_service()
{
   if [ -n "$SERVICE_NAME" ]; then
      stop_single_service $SERVICE_NAME
   else
      count=0
      for service in $( get_services )
      do
         service=$( basename $service )
         stop_single_service $service
         count=$((count+1))
      done
      if [ "$count" == 0 ]; then
         crash "No services found to stop"
      fi
   fi
}

# Start coaster service
start_service()
{ 
   # Figure out naming, create directory for this service
   if [ -z "$SERVICE_NAME" ]; then
      SERVICE_NAME=$( ls -1d $SERVICE_DIR/*/ 2>/dev/null | wc -l )
      SERVICE_NAME=$( expr $SERVICE_NAME + 1 )
      SERVICE_NAME="service-$SERVICE_NAME"
   fi

   COASTER_DIR="$SERVICE_DIR/$SERVICE_NAME"
   if [ -d "$COASTER_DIR" ]; then
      crash "Service named $SERVICE_NAME already exists!"
   fi

   echo -e "Starting Swift service..\n"
   mkdir $COASTER_DIR || crash "Unable to create $COASTER_DIR"
   LOG="$COASTER_DIR/swift-service.log"

   # Verify we can find coaster service
   if [ ! -x "$COASTER_SERVICE" ]; then
      crash "Unable to find $COASTER_SERVICE!"
   fi

   if [ -z "$TMPDIR" ]; then
      TMPDIR=$PWD
   fi

   # Create files for storing port info, if needed
   if [ -z "$LOCAL_PORT" ]; then
      LOCAL_PORT_FILE=$( run_command mktemp $TMPDIR/XXXXXX )
   fi

   if [ -z "$SERVICE_PORT" ]; then
      SERVICE_PORT_FILE=$( run_command mktemp $TMPDIR/XXXXXX )
   fi

   # Check values in configuration file to determine how we should start coaster-service
   PID=""
   if [ -z "$SERVICE_PORT" ] && [ -z "$LOCAL_PORT" ]; then
      PID=$( run_command_bg $COASTER_SERVICE -nosec -portfile $SERVICE_PORT_FILE -localportfile $LOCAL_PORT_FILE -passive )
   elif [ -n "$SERVICE_PORT" ] && [ -z "$LOCAL_PORT" ]; then
      PID=$( run_command_bg $COASTER_SERVICE -nosec -port $SERVICE_PORT -localportfile $LOCAL_PORT_FILE -passive )
   elif [ -z "$SERVICE_PORT" ] && [ -n "$LOCAL_PORT" ]; then
      PID=$( run_command_bg $COASTER_SERVICE -nosec -portfile $SERVICE_PORT_FILE -localport $LOCAL_PORT -passive )
   elif [ -n  "$SERVICE_PORT" ] && [ -n "$LOCAL_PORT" ]; then
      PID=$( run_command_bg $COASTER_SERVICE -nosec -port $SERVICE_PORT -localport $LOCAL_PORT -passive )
   fi
   echo $PID >> $COASTER_DIR/pid

   # If waiting on port files to be created, wait for files to be created
   if [ -z "$SERVICE_PORT" ]; then
      wait_for_file $SERVICE_PORT_FILE 60
   fi

   if [ -z "$LOCAL_PORT" ]; then
      wait_for_file $LOCAL_PORT_FILE 60
   fi

   # Determine SERVICE_PORT
   if [ -z "$SERVICE_PORT" ]; then
      if [ ! -f "$SERVICE_PORT_FILE" ]; then
         crash "Unable to determine SERVICE_PORT!"
      fi
      SERVICE_PORT=$( cat $SERVICE_PORT_FILE )
      rm $SERVICE_PORT_FILE
   fi

   # Determine LOCAL_PORT
   if [ -z "$LOCAL_PORT" ]; then
      if [ ! -f "$LOCAL_PORT_FILE" ]; then
         crash "Unable to determine LOCAL_PORT!"
      fi
      LOCAL_PORT=$( cat $LOCAL_PORT_FILE )
      rm $LOCAL_PORT_FILE
   fi

   echo Service name: $SERVICE_NAME
   echo Service port: $SERVICE_PORT
   echo Worker port: $LOCAL_PORT
   echo Worker script: $WORKER
 
   # Generate sites.xml
   export EXECUTIONURL="http://$IPADDR:$SERVICE_PORT"
   export WORKERURL=$( java -jar $SWIFT_BIN/listcoasterurls.jar $LOCAL_PORT )

   echo Execution URL: $EXECUTIONURL
   echo Worker URL: $WORKERURL
   echo $EXECUTIONURL >> $COASTER_DIR/execution.url
   echo $WORKERURL >> $COASTER_DIR/worker.url
   echo $WORKER >> $COASTER_DIR/worker.path
   echo $LOCAL_PORT >> $COASTER_DIR/worker.port
   echo $SERVICE_PORT >> $COASTER_DIR/service.port

   GENSITES_ARGS=""
   if [ -f "$CONFIG_FILE" ]; then
      GENSITES_ARGS=" -p $CONFIG_FILE "
   fi

   if [ -f "gensites.template" ]; then
      GENSITES_ARGS=" $( cat gensites.template ) "
   else
      GENSITES_ARGS=" persistent-coasters "
   fi

   # Give defaults to gensites variables if needed
   if [ -z "$JOBSPERNODE" ]; then
      export JOBSPERNODE=1
   fi
   if [ -z "$JOBTHROTTLE" ]; then
      export JOBTHROTTLE=0
   fi
   if [ -z "$WORK" ]; then
      export WORK=/tmp
   fi
   gensites -n $SERVICE_NAME $GENSITES_ARGS > $COASTER_DIR/sites.xml
   echo
}

# Display status of services
display_status()
{
   count=0
   services=""

   if [ -n "$SERVICE_NAME" ]; then
      services=$SERVICE_DIR/$SERVICE_NAME
      if [ ! -d "$services" ]; then
         crash "Service $SERVICE_NAME does not exist"
      fi
   else
      services=$( get_services )
   fi

   for service in $services
   do
      verify_files_exist $service/pid $service/service.port $service/execution.url $service/worker.port $service/worker.url $service/worker.path
      echo -e "\nName: $(basename $service )"
      PID=$( cat $service/pid )
      echo "PID: $PID"

      if ps -p $PID &>/dev/null; then
         echo Status: Running
      else
         echo Status: Failed
      fi

      echo "Service port: $( cat $service/service.port )"
      echo "Service URL: $( cat $service/execution.url )"
      echo "Local port: $( cat $service/worker.port)"
      echo "Local URL: $( cat $service/worker.url )" 
     
      echo "Worker script: $( cat $service/worker.path )"    
      echo -n "Workers started: "
      if [ -f "$service/worker.pid" ]; then
         if ps -p $( cat $service/worker.pid ) &>/dev/null ; then
            echo "yes"
         else 
            echo "no"
         fi
      else
         echo "no"
      fi
      count=$((count+1))
   done
   if [ "$count" -gt 0 ]; then
      echo
   else
      echo "No services found"
   fi
}

# Generate XML
generate_xml()
{
   count=0
   echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
   echo -e "<config xmlns=\"http://www.ci.uchicago.edu/swift/SwiftSites\">\n"

   services=""
   if [ -n "$SERVICE_NAME" ]; then
      NAME=$( echo $SERVICE_NAME |  sed s/,/' '/g )
      for n in $SERVICE_NAME
      do
         services="$services $SERVICE_DIR/$n "
      done
   else
      services=$( get_services )
   fi

   for service in $services
   do
      if [ ! -d "$service" ]; then
         crash "Service $( basename $service ) does not exist"
      fi
      verify_files_exist $service/sites.xml
      cat $service/sites.xml | grep -v "<?xml" | grep -v "<config" | grep -v "</config>"
      echo
   done

   echo "</config>"

}

# Display debug info
display_debug()
{
   SERVICES=$( get_services )
   for service in $SERVICES
   do
      echo -e "Displaying debug info for service $( basename $service ) ($service/swift-service.log)\n"
      cat $service/swift-service.log
      echo
   done
}

# Parse command line arguments
START=0; STOP=0; STATUS=0; XML=0; DEBUG=0
while [ $# -gt 0 ]; do
   case $1 in
      -debug) DEBUG=1; shift;;
      -localport|-workerport) LOCAL_PORT=$2; shift 2;;
      -name) SERVICE_NAME=$2; shift 2;;
      -serviceport) SERVICE_PORT=$2; shift 2;;
      -start) START=1; shift;;
      -status) STATUS=1; shift;; 
      -stop) STOP=1; shift;;
      -xml) XML=1; shift;;
      *) echo "Do not recognize command line option: $1" 1>&2; usage;;
   esac
done

if [ $(($START+$STOP+$STATUS+$XML+$DEBUG)) != 1 ]; then
   usage
fi

if [ "$START" == 1 ]; then
   start_service
elif [ "$STOP" == 1 ]; then
   stop_service
elif [ "$STATUS" == 1 ]; then
   display_status
elif [ "$XML" == 1 ]; then
   generate_xml
elif [ "$DEBUG" == 1 ]; then
   display_debug
fi
