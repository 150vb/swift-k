#!/usr/bin/perl -w

use strict;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../lib/perl";
use Cwd;
use Cwd qw(abs_path);
use File::Copy;
use File::Path;
use Getopt::Long qw(:config permute pass_through);
use File::Which qw(which where);
use XML::Simple;
use Pod::Usage;
use SwiftConfig;

# Command line processing
my @option_sites;     # Site name to execute upon
my $option_script;    # Script name to run
my @option_inputs;    # Name of data to include with execution

GetOptions(
    'site|sites=s{,}'   => \@option_sites,
    'script=s'          => \$option_script,
    'input|inputs=s{,}' => \@option_inputs,
    'help|man'              => sub { pod2usage(-verbose => 2); },
);

# Check arguments
initialize_swiftconfig();
if(!$option_script || !@option_sites) {
    print "Incorrect usage. Try swiftrun -help\n";
    exit;
}

# Create run directory
my $script_filename = strip_directory($option_script);
my $dotswift_directory = "$ENV{'HOME'}/.swift";
my @run_directories = <run.????>;
if(!@run_directories) {
    $run_directories[0] = "run.0000";
}
my ($run_number) = $run_directories[-1] =~ m{(\d+)};
$run_number++;
my $run_directory = getcwd() . "/" . sprintf "run.%04s", $run_number;
create_directory($run_directory);
my @sites_xml;

# Copy over needed files
copy_file( "$option_script", "$run_directory" );

# Sites.xml for 'all'
if( grep /all/, @option_sites ) {
    foreach my $all_site(<$dotswift_directory/sites/*>) {
        if ( !-d "$all_site" ) {
            die "Unable to find directory for $all_site\n";
        }
        if ( !-e "$all_site/sites.xml" ) {
            die "Unable to find sites.xml for $all_site\n";
        }
        my $properties_file = "$dotswift_directory/sites/$all_site/swift.properties";
        if( -e "$properties_file") {
            copy_file( $properties_file, "$run_directory/swift.properties");
        }

        open(CURRENT_SITE, "$all_site/sites.xml")
            || die "Unable to open $all_site/sites.xml";
        my @current_site_data = <CURRENT_SITE>;
        push(@sites_xml, @current_site_data);
        close(CURRENT_SITE);
        # Add applications
        my @all_apps;
        if(-e "$all_site/apps") {
            open(APPFILE, "$all_site/apps")
                || die "Unable to open $all_site/apps";
            @all_apps = <APPFILE>;
            close(APPFILE);
            foreach(@all_apps) {
                chomp($_);
                $_ = "$dotswift_directory/apps/$_.apps\n";
            }
        }
        else {   
            @all_apps = glob("$dotswift_directory/apps/*.apps");
        }
        foreach my $current_app_file(@all_apps) {
            chomp($current_app_file);
            open(CURRENT_APP, $current_app_file) || die "Unable to open app file $current_app_file\n";
            my @current_app_data = <CURRENT_APP>;
            close(CURRENT_APP);
            $all_site = strip_directory($all_site);
            foreach(@current_app_data) {
                s/SWIFTCONFIGURATION/$all_site/ig;
            }
            open(RUNTC, ">>$run_directory/tc.data") || die "Unable to write to $run_directory/tc.data\n";
            print RUNTC @current_app_data;
            close(RUNTC);
        }
    }
}
  
# Sites.xml for non-'all'
else {
    foreach my $site (@option_sites) {
        if ( !-d "$dotswift_directory/sites/$site" ) {
            die "Unable to find configuration for $site\n";
        }
        if ( !-e "$dotswift_directory/sites/$site/sites.xml" ) {
            die "Unable to find sites.xml for $site\n";
        }              
        open(CURRENT_SITE, "$dotswift_directory/sites/$site/sites.xml")
            || die "Unable to open $dotswift_directory/sites/$site/sites.xml";
        my @current_site_data = <CURRENT_SITE>;
        close(CURRENT_SITE);
        push(@sites_xml,  @current_site_data);
        my $properties_file = "$dotswift_directory/sites/$site/swift.properties";
        if( -e "$properties_file") {
            copy_file( $properties_file, "$run_directory");
        }
        # Add applications
        my @all_apps;
        if(-e "$dotswift_directory/sites/$site/apps") {
            open(APPFILE, "$dotswift_directory/sites/$site/apps")
                || die "Unable to open $site/apps";
            @all_apps = <APPFILE>;
            close(APPFILE);
            foreach(@all_apps) {
                chomp($_);
                $_ = "$dotswift_directory/apps/$_.apps";
            }
        }
        else {   
            @all_apps = glob("$dotswift_directory/apps/*.apps");
        }
        foreach my $current_app_file(@all_apps) {
            open(CURRENT_APP, $current_app_file) || die "Unable to open app file $current_app_file\n";
            my @current_app_data = <CURRENT_APP>;
            close(CURRENT_APP);
            foreach(@current_app_data) {
                s/SWIFTCONFIGURATION/$site/ig;
            }
            open(RUNTC, ">>$run_directory/tc.data") || die "Unable to write to $run_directory/tc.data\n";
            print RUNTC @current_app_data;
            close(RUNTC);
        }
    }
}


# Link input data
foreach my $input_file (@option_inputs) {
    # Check for relative path
    my $first_char = substr $input_file, 0, 1;
    if( $first_char ne '/') {
        $input_file = getcwd() . "/$input_file";
    }

    if ( !-e $input_file ) {
        die "Unable to find requested input file: $input_file\n";
    }
    my $new_path = "$run_directory/" . strip_directory($input_file);
    symlink $input_file, $new_path
        || die "Unable to create symlink to $new_path\n";
}

open( SITEFILE, ">$run_directory/sites.xml" ) 
    || die "Unable to open $run_directory/sites.xml for writing\n";
print SITEFILE "<config>\n@sites_xml</config>\n";
close(SITEFILE);

# Run swift
chdir("$run_directory") || die "Unable to chdir to $run_directory\n";
print "Executing script $option_script\n";
print "Check $run_directory for output and debugging information\n";
my $system_command = 
      'swift '
    . "-sites.file $run_directory/sites.xml "
    . "-tc.file $run_directory/tc.data "
    . "$option_script ";
if(-e "$run_directory/swift.properties") {
    $system_command .= "-config $run_directory/swift.properties ";
}

# Add unknown options
foreach my $unknown_argument (@ARGV) {
    $system_command .= "$unknown_argument ";
}

# Execute
system($system_command);

my $sec = (time - $^T);
my $hours = ($sec/(60*60))%24;
my $mins = ($sec/60)%60;
my $secs = $sec%60;
my $datestring = sprintf("%dh:%dm:%ds", $hours, $mins, $secs);
print "Script $option_script finished in $datestring\n";

__END__

=head1 NAME

swiftrun - Run swift using configurations generated by swiftconfig

=head1 SYNOPSIS

swiftrun [B<-option> value]

=head1 OVERVIEW

The swiftrun program allows you to execute swift using configurations
generated by swiftconfig.

=head1 DESCRIPTION

General operations:
   -site <site1 site2>	Execute swift on given sitename(s)
   -script file.swift	Specify the swift script to run
   -input <file1 file2>  Link to data required for execution
   
=head1 EXAMPLES

Run a script on a single site
   swiftrun -site local -script my.script

Run a script on multiple sites
   swiftrun -site host1 host2 -script my.script
   
Run a script on all available configurations
    swiftrun -site all -script my.script

Link multiple files 
   swiftrun -site local -script my.script -input /foo/file* /foo2/file*

=cut

