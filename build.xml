<!-- ===================================================================
 This code is developed as part of the Java CoG Kit project
 The terms of the license can be found at http://www.cogkit.org/license
 This message may not be removed or altered.
==================================================================== -->

<project name="Java CoG Kit" default="redist" basedir=".">

	<property file="project.properties"/>
	<property name="cog.dir"		value="${basedir}/../../"/>
	<property name="main.buildfile"	value="${cog.dir}/mbuild.xml"/>
	<property name="dist.dir" 		value="${cog.dir}/modules/${module.name}/dist/${module.name}-${version}"/>
	<property name="build.dir" 		value="${cog.dir}/modules/${module.name}/build"/>

	<!-- ================================================ -->
	<!-- Help                                             -->
	<!-- ================================================ -->

	<target name="help">
		<echo>
	Available targets:
		help:
			prints out this help message

		dist:
			creates a distribution directory of the 
			${project} ${long.name}
			
		redist:
			does a distclean and then a dist. This is the safest
			way of building Swift.

		jar:
			creates a jar file for the ${project} ${long.name}
			named ${jar.filename}

		javadoc:
			creates the documentation

		clean:
			removes the compiled classes

		distclean:
			deletes the distribution directory

		all:
			dist and javadoc

		deploy.webstart:
			deploys the module as a webstart application

		dist.joint:
			builds everything into one jar file. Should only
			be used globally (from all)

		fixeol:
			change newlines to the unix standard.
		</echo>
	</target>


	<!-- ================================================ -->
	<!-- Dist                                             -->
	<!-- ================================================ -->

	<target name="etc">
		<copy todir="${dist.dir}/etc">
			<fileset dir="${cog.dir}/modules/${module.name}/etc"/>
		</copy>
	</target>

	<target name="dist" depends="generateVersion, antlr, compileSchema">
		<ant antfile="${main.buildfile}" target="dist"/>
		<mkdir dir="${dist.dir}/libexec"/>
		<copy todir="${dist.dir}/libexec">
			<fileset dir="${cog.dir}/modules/${module.name}/libexec"/>
		</copy>
		<copy todir="${dist.dir}/bin">
			<fileset dir="${cog.dir}/modules/${module.name}/bin"/>
		</copy>
		<chmod perm="+x" file="${dist.dir}/bin/VDL2Karajan"/>
		<chmod perm="+x" file="${dist.dir}/bin/vdlc"/>
		<!--<delete file="${dist.dir}/lib/jaxrpc.jar" quiet="true"/>-->
		<delete includeEmptyDirs="true">
			<fileset dir="${dist.dir}/bin/examples"/>
		</delete>
		<delete>
			<fileset dir="${dist.dir}/bin" 
				includes="examples, cog-checkpoint*, cog-file-operation*, cog-register*"/>
			<fileset dir="${dist.dir}/bin" 
				includes="cog-task2xml*, globus-gass-server*, globus-personal-gatekeeper*"/>
			<fileset dir="${dist.dir}/bin" 
				includes="globus2jks*, grid-info-search*, cogrun*, globus-gass-server-shutdown*"/>
		</delete>
		<antcall target="remove-supporting" />
		<copy todir="${dist.dir}/etc" 
			file="${cog.dir}/modules/${module.name}/etc/karajan.properties" 
			overwrite="true"/>
		<copy todir="${dist.dir}/etc" 
			file="${cog.dir}/modules/${module.name}/etc/log4j.properties" 
			overwrite="true"/>
		<replace file="${dist.dir}/bin/swift">
			<replacetoken>COG_INSTALL_PATH</replacetoken>
			<replacevalue>SWIFT_HOME</replacevalue>
		</replace>
		<replace file="${dist.dir}/bin/swift">
			<replacetoken>LOCALCLASSPATH=$SWIFT_HOME/etc</replacetoken>
			<replacevalue>LOCALCLASSPATH=$SWIFT_HOME/etc$CPDELIM$SWIFT_HOME/libexec</replacevalue>
		</replace>
		<replace file="${dist.dir}/bin/swift">
			<replacetoken>updateOptions "$SWIFT_HOME" "SWIFT_HOME"
</replacetoken>
			<replacevalue>updateOptions "$SWIFT_HOME" "COG_INSTALL_PATH"
updateOptions "$SWIFT_HOME" "vds.home"
updateOptions "$SWIFT_HOME" "swift.home"
#Use /dev/urandom instead of /dev/random for seeding RNGs
#This will lower the randomness of the seed, but avoid
#large delays if /dev/random does not have enough entropy collected
updateOptions "file:///dev/urandom" "java.security.egd"

</replacevalue>
		</replace>

		<replace file="${dist.dir}/bin/swift.bat">
			<replacetoken>COG_INSTALL_PATH</replacetoken>
			<replacevalue>SWIFT_HOME</replacevalue>
		</replace>
		<replace file="${dist.dir}/bin/swift.bat">
			<replacetoken>set LOCALCLASSPATH=%SWIFT_HOME%\etc</replacetoken>
			<replacevalue>set LOCALCLASSPATH=%SWIFT_HOME%\etc;%SWIFT_HOME%\libexec</replacevalue>
		</replace>
		<replace file="${dist.dir}/bin/swift.bat">
			<replacetoken>set COG_OPTS=</replacetoken>
			<replacevalue>set COG_OPTS=-DCOG_INSTALL_PATH=%SWIFT_HOME% -Dswift.home=%SWIFT_HOME% -Dvds.home=%SWIFT_HOME% </replacevalue>
		</replace>
		<chmod perm="+x" file="${dist.dir}/bin/swift"/>
		<chmod perm="+x" file="${dist.dir}/bin/swift-osg-ress-site-catalog"/>
	</target>

	<target name="antlr">
		<java classname="antlr.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg value="${cog.dir}/modules/${module.name}/src/org/globus/swift/parser"/>
			<arg value="resources/swiftscript.g"/>
			<classpath>
				<pathelement location="${cog.dir}/modules/${module.name}/lib/antlr-2.7.5.jar"/>
				<pathelement location="${cog.dir}/modules/${module.name}/lib/stringtemplate.jar"/>
			</classpath>
		</java>
	</target>

	<target name="compileSchema">
		<java classname="org.apache.xmlbeans.impl.tool.SchemaCompiler" fork="true" failonerror="true">
			<arg value="-src"/><arg value="src"/>
			<arg value="-javasource"/><arg value="1.4"/>
			<arg value="-out"/><arg value="${cog.dir}/modules/${module.name}/lib/vdldefinitions.jar"/>
			<arg value="resources/swiftscript.xsd"/>
			<arg value="resources/swiftscript.xsdconfig"/>
			<classpath>
				<pathelement location="${cog.dir}/modules/${module.name}/lib/xbean.jar"/>
				<pathelement location="${cog.dir}/modules/${module.name}/lib/resolver.jar"/>
				<pathelement location="${cog.dir}/modules/${module.name}/lib/jsr173_1.0_api.jar"/>
			</classpath>
		</java>
	</target>


	<!-- ================================================ -->
	<!-- Compile                                          -->
	<!-- ================================================ -->

	<target name="compile">
		<ant antfile="${main.buildfile}" target="compile"/>
	</target>

	<!-- ================================================ -->
	<!-- Clean                                            -->
	<!-- ================================================ -->

	<target name="clean" depends="cleanGenerated">
		<ant antfile="${main.buildfile}" target="clean"/>
	</target>


	<!-- ================================================ -->
	<!-- Distclean                                        -->
	<!-- ================================================ -->

	<target name="distclean" depends="cleanGenerated">
		<ant antfile="${main.buildfile}" target="distclean"/>
	</target>


	<target name="cleanGenerated">
		<delete includeEmptyDirs="true">
			<fileset dir="src/org/griphyn/vdl/model/" includes="**/*.java"/>
		</delete>
		<delete file="lib/vdldefinitions.jar"/>
	</target>

	<!-- ================================================ -->
	<!-- Jar                                              -->
	<!-- ================================================ -->

	<target name="jar">
		<ant antfile="${main.buildfile}" target="jar"/>
	</target>



	<!-- ================================================ -->
	<!-- Javadoc                                          -->
	<!-- ================================================ -->

	<target name="javadoc">
		<ant antfile="${main.buildfile}" target="javadoc"/>
	</target>



	<!-- ================================================ -->
	<!-- PMD                                              -->
	<!-- ================================================ -->

	<target name="pmd">
		<ant antfile="${main.buildfile}" target="pmd"/>
	</target>

	<!-- ================================================ -->
	<!-- deploy.webstart                                  -->
	<!-- ================================================ -->

	<target name="deploy.webstart">
		<ant antfile="${main.buildfile}" target="deploy.webstart"/>
	</target>

	<!-- ================================================ -->
	<!-- replacelibs                                      -->
	<!-- ================================================ -->

	<target name="replacelibs">
		<ant antfile="${main.buildfile}" target="replacelibs"/>
	</target>

	<!-- ================================================ -->
	<!-- webstart.launchers                               -->
	<!-- ================================================ -->

	<target name="webstart.launchers">
		<ant antfile="${main.buildfile}" target="webstart.launchers"/>
	</target>

	<!-- ================================================ -->
	<!-- dist.joint                                       -->
	<!-- ================================================ -->

	<target name="dist.joint">
		<ant antfile="${main.buildfile}" target="dist.all"/>
	</target>
	<!-- ================================================ -->
	<!-- fixeol                                           -->
	<!-- ================================================ -->

	<target name="fixeol">
		<ant antfile="${main.buildfile}" target="fixeol"/>
	</target>


	<target name="module.package">
		<ant antfile="${main.buildfile}" target="module.package"/>
	</target>

	<target name="generateVersion">
		<echo file="libexec/version.txt">Swift ${version} </echo>
		<exec os="Linux, Mac OS X" executable="libexec/svn-revision" append="true" output="libexec/version.txt"/>
		<exec os="Linux, Mac OS X" executable="libexec/generate-buildid" append="false" output="libexec/buildid.txt"/>
	</target>
	
	<target name="redist" depends="distclean, dist">
	</target>

       <target name="remove-supporting" if="no-supporting">
 		<delete>
			<fileset dir="${dist.dir}/bin" 
				includes="cog*, globus*, grid*"/>
		</delete>
        </target>

</project>


