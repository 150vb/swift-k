#! /bin/sh 

# Change these for your configuration

# Local means that the test will be executed from this directory
# instead of a fresh checkout. "yes"|"no"
# This directory has to be a valid cog directory tree. 
LOCAL="yes"
# Indicates whether you want to recompile the Java CoG Kit or just use an existing build
COMPILE="yes"
# Main build directory
BUILDDIR=$HOME/tmp/cog-test
# The log file
LOGFILE=$BUILDDIR/test.log
# The directory to generate the html output in
HTMLOUTDIR=$HOME/public_html/tests
# A directory containing jdks. It can contain other things, which will be filtered out
JDKSDIR=/usr/local
# A list of full paths to JDKS. Leave blank to use the above
JDKS=
# The location of Ant
# The location of the cvs repository
CVSROOT=":pserver:anonymous@cvs.globus.org:/home/dsl/cog/CVS"
# The cog.properties file to be used. If it is not found, a default will be used
COG_PROPERTIES=$HOME/.globus/cog.properties
# A list of URLs containing lists of globus machines/services.
# You can use file://... for local files
# See the README for the format of the list.
HOSTLISTS="../examples/env.txt"
# Time in seconds after which to kill a test if it has not completed
TIMEOUT=120

# End of configuration part

PATH=$ANT_HOME/bin:$PATH
unset CLASSPATH
export PATH
ANT_VERSION=`ant -version`
UNAME=`uname -srmp`

error()
{
  # Function. Parameter 1 is the return code
  # Parameter 2 is the text displayed on failure.
  # Parameter 3 is the text displayed on success. 
  if [ "$1" -ne "0" ]; then
    echo "[ERROR $1]: $2"
    echo The log file is located in $LOGFILE
    exit $1 
  else
    echo "[OK]: $3"
  fi
}

warning()
{
  if [ "$1" -ne "0" ]; then
    echo "[WARNING $1]: $2"
  else
    echo "[OK]: $3"
  fi
}

mkdir -p $BUILDDIR 
rm -f $LOGFILE

echo SCRIPT=$0
echo LOGFILE=$LOGFILE
date >> $LOGFILE 2>&1

cvs_checkout()
{
    case $CVSROOT in
	:pserver*)
	    echo "/1 $CVSROOT A" >$HOME/.cvspass
	    ;;
    esac
    cvs -d $CVSROOT co $1 >>$LOGFILE 2>&1
    error $? "cvs checkout $1 failed" "cvs checkout $1"
}

if test $LOCAL = "no"; then
    rm -rf $BUILDDIR/cog >>$LOGFILE 2>&1

    mkdir -p $BUILDDIR >>$LOGFILE 2>&1
    error $? "Could not create directory $BUILDDIR" "Created directory $BUILDDIR" 

    cd $BUILDDIR >>$LOGFILE 2>&1
    error $? "cd to $BUILDDIR failed" "changed directory to $BUILDDIR"

    cvs_checkout cog
fi

cd $BUILDDIR/cog/modules/testing

echo "Ant version is $ANT_VERSION" >> $LOGFILE

# Copy the host list
HOSTLISTSLINKS=
echo ""> machines.txt
for HOSTLIST in $HOSTLISTS; do
    OUTPUTFILE=`mktemp /tmp/hostlistXXXXXX`    
    case $HOSTLIST in
	http://*)
	    wget -O $OUTPUTFILE $HOSTLIST >>$LOGFILE 2>&1
	    HOSTLISTSLINKS="$HOSTLISTSLINKS<br><a href=\"$HOSTLIST\">$HOSTLIST</a>"
	    ;;
	file://*)
	    cp ${HOSTLIST:6} $OUTPUTFILE >>$LOGFILE 2>&1
	    cp ${HOSTLIST:6} $HTMLOUTDIR
	    HOSTLISTSLINKS="$HOSTLISTSLINKS<br><a href=\"${HOSTLIST:6}\">${HOSTLIST:6}</a>"
	    ;;
	*)
	    cp $HOSTLIST $OUTPUTFILE >>$LOGFILE 2>&1
	    cp $HOSTLIST $HTMLOUTDIR
	    HOSTLISTSLINKS="$HOSTLISTSLINKS<br><a href=\"$HOSTLIST\">$HOSTLIST</a>"
	    ;;
    esac
    if test $? -ne 0; then
		echo "Could not download hostlist: $HOSTLIST" >> $LOGFILE
    else
		cat $OUTPUTFILE >> machines.txt
    fi 
    rm -f $OUTPUTFILE >>$LOGFILE 2>&1
done

mkdir -p $HTMLOUTDIR >>$LOGFILE 2>&1
DATE=`date`
export UNAME
export DATE

cat <<LULU >$HTMLOUTDIR/help.html
<html>
    <head>
	<title>General tests help</title>
    </head>
    <body>

	<a name="Time"></a> 
	<h2>Time</h2> 
	
	The time column indicates the approximate time at which the
	tests in the respective row were performed. 
	
	
	<a name="Host"></a>
	<h2>Host</h2> 
	
	The host column contains the network name of the machine where
	the service that is testes is installed.  The name may also
	contain the TCP port on which the service is listening for
	connections.
	
	
	<a name="OS"></a>
	<h2>Operating System</h2>
	
	Shows what operating system is running on the server machine.
	The information is taken from the host table.
	
	
	<a name="GRIS"></a>
	<h2>GRIS Test</h2>
	
	The test uses JNDI to retrieve information about the server
	machine. 


	<a name="FTP"></a>
	<h2>FTP Test</h2>

	This test connects to a gsiftp server and performs a normal file
	transfer and a 3rd party transfer.


	<a name="GRAM"></a>
	<h2>GRAM Test</h2>

	This test submits a job and checks if the job submitted was
	successfully  completed.

	
	<a name="Ping"></a>
	<h2>Ping test</h2>
	
	<p> This is a simple test that checks if the GSIFTP or
	GRAM server is alive on the remote machine.


	<a name="List"></a>
	<h2>List test</h2> 
	
	The list test simply lists the files in the default (home)
	directory on the remote machine.
	
	
	<a name="2Party"></a>
	<h2>2nd party test</h2>
	
	This test transfers a test file to the remote machine, then 
	transfers the file back and checks its integrity.
	
	
	<a name="3Party"></a>
	<h2>3rd party test</h2>
	
	This tests the 3rd party transfer feature of GSIFTP.
	
	<a name="GRAM Version"></a>
	<h2>GRAM Version</h2>
	
	Shows the version of the GRAM service running on the remote
	machine
	
	
	<a name="GSIFTP Version"></a>
	<h2>GSIFTP Version</h2>
	
	Shows the version of the GSIFTP server running on the remote
	machine. The version is taken from the host table and is not
	detected automatically. 
	
	
	<a name="Execute"></a>
	<h2>Job execution test</h2>
	
	This test submits a simple job to the remote machine and test if
	the job was executed correctly. This test will fail is the
	<pre>/bin/date</pre> executable is not available on the remote
	machine.
	
    </body>
</html>
LULU



htmlhead(){
cat <<LULU >$1
<html>
<head>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<title>$2</title>
</head>
<body>
<h3>$2</h3>
Host machine: $HOSTNAME <br>
OS: $UNAME <br>
Date: $DATE <br><br>
LULU
}

allouts(){
echo $1>>$GENERAL
echo $1>>$GRAM
echo $1>>$FTP
}

htmlhead "$HTMLOUTDIR/index.html" "Java CoG Kit test"
cat <<LULU >$HTMLOUTDIR/index.html
The following tests were performed:<br>
<a href="general.html">General tests</a><br>
<a href="gram.html">GRAM tests</a><br>
<a href="ftp.html">GSIFTP tests</a><br>
<br>
The following host list(s) were used:
LULU
echo $HOSTLISTSLINKS >> $HTMLOUTDIR/index.html
cat <<LULU >>$HTMLOUTDIR/index.html
</body>
</html>
LULU

GENERAL=$HTMLOUTDIR/general.html
GRAM=$HTMLOUTDIR/gram.html
FTP=$HTMLOUTDIR/ftp.html

htmlhead "$GENERAL" "Java CoG Kit general tests"
htmlhead "$GRAM" "Java CoG Kit GRAM tests"
htmlhead "$FTP" "Java CoG Kit GSIFTP tests"

if test -z $JDKS; then
    for JDKDIR in $JDKSDIR/*; do
	if test -f $JDKDIR/bin/javac; then
	    #test to see if it's not already there
	    NEW=1
	    for JDK in $JDKS; do
		if test $JDK/bin/javac -ef $JDKDIR/bin/javac; then
		    NEW=0
		fi
	    done
	    if test $NEW -eq 1; then
		JDKS="$JDKS $JDKDIR"
		echo "Adding $JDKDIR" >> $LOGFILE
	    else
		echo "$JDKDIR already added. Maybe it's a symlink" >>$LOGFILE
	    fi
	fi
    done
fi

INITIAL_PATH=$PATH

if test -z "$JDKS"; then
	echo "Warning! No JDKs found. No tests will be performed"
	echo "Warning! No JDKs found. No tests will be performed" >> $LOGFILE
fi

for JAVA_HOME in $JDKS; do
    echo "Running tests on $JAVA_HOME" >>$LOGFILE
    echo $JAVA_HOME
    PATH="$JAVA_HOME/bin:$INITIAL_PATH"
    export PATH
    export JAVA_HOME
    export JDK

    JDK=`basename $JAVA_HOME`
    JAVA_VERSION=`java -version 2>&1`
    
    TESTDIR=$JDK
    
    allouts "<b>$JDK</b><br>"
    
    if test $COMPILE = "yes"; then
		#clean old builds
		ant distclean >>$LOGFILE 2>&1
		#build
		ant dist >>$LOGFILE 2>&1
		rm -f $HTMLOUTDIR/${JDK}build-log.txt >>$LOGFILE 2>&1
		ant dist >>$HTMLOUTDIR/${JDK}build-log.txt 2>&1
		if test $? -ne 0; then
		    echo "[ERROR $?]: compiling ogce failed" >>$LOGFILE
	    	cat $HTMLOUTDIR/${JDK}build-log.txt >>$LOGFILE
		    allouts "<a href=\"${JDK}build-log.txt\">Build failed</a><br>"
		    continue
		else
		    cat $HTMLOUTDIR/${JDK}build-log.txt >>$LOGFILE
	    	echo "Build successful" >>$LOGFILE
		fi
    else
		echo "Using existing build" >>$LOGFILE
    fi

    echo Starting production tests
    
    rm -f "$HTMLOUTDIR/${JDK}general-output.html" >>$LOGFILE 2>&1
    ant -f test.xml -Doutput.dir $HTMLOUTDIR -Doutput.prefix $JDK -Dorg.globus.config.file $COG_PROPERTIES -Dtimeout $TIMEOUT general >> $LOGFILE 2>&1
    warning $? "general tests failed" "tests"
    cat "$HTMLOUTDIR/${JDK}general-output.html" >>$GENERAL
    
    rm -f "$HTMLOUTDIR/${JDK}gram-output.html" >>$LOGFILE 2>&1
    ant -f test.xml -Doutput.dir $HTMLOUTDIR -Doutput.prefix $JDK -Dorg.globus.config.file $COG_PROPERTIES -Dtimeout $TIMEOUT gram >> $LOGFILE 2>&1
    warning $? "gram test failed" "gram"
    cat "$HTMLOUTDIR/${JDK}gram-output.html" >>$GRAM 
    
    rm -f "$HTMLOUTDIR/${JDK}ftp-output.html" >>$LOGFILE 2>&1
    ant -f test.xml -Doutput.dir $HTMLOUTDIR -Doutput.prefix $JDK -Dorg.globus.config.file $COG_PROPERTIES -Dtimeout $TIMEOUT ftp >> $LOGFILE 2>&1
    warning $? "ftp test failed" "ftp"
    cat "$HTMLOUTDIR/${JDK}ftp-output.html" >>$FTP
done

allouts "</body></html>"
chmod -R a+r $HTMLOUTDIR
