// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: fullnames 
// Source File Name:   GridClient.java

package org.globus.ogce.beans.filetransfer.gui.remote.gridftp;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.io.Serializable;
import java.io.StringReader;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.apache.log4j.Logger;
import org.globus.common.CoGProperties;
import org.globus.ftp.DataChannelAuthentication;
import org.globus.ftp.GridFTPClient;
import org.globus.ftp.exception.ServerException;
import org.globus.gsi.GlobusCredential;
import org.globus.gsi.gssapi.GlobusGSSCredentialImpl;
import org.globus.ogce.beans.filetransfer.gui.FileTransferMainPanel;
import org.globus.ogce.beans.filetransfer.gui.monitor.WindowProgress;
import org.globus.ogce.beans.filetransfer.gui.remote.common.DisplayInterface;
import org.globus.ogce.beans.filetransfer.gui.remote.common.GridEvent;
import org.globus.ogce.beans.filetransfer.gui.remote.common.GridListener;
import org.globus.ogce.beans.filetransfer.gui.remote.common.RemoteTree;
import org.globus.ogce.beans.filetransfer.gui.remote.common.RemoteTreeFrame;
import org.globus.ogce.beans.filetransfer.util.DirQueue;
import org.globus.tools.ui.util.UITools;

// Referenced classes of package org.globus.ogce.beans.filetransfer.gui.remote.gridftp:
//            RemDirListener, RemDirEvent

public class GridClient extends javax.swing.JPanel
    implements java.beans.PropertyChangeListener, org.globus.ogce.beans.filetransfer.gui.remote.common.DisplayInterface, org.globus.ogce.beans.filetransfer.gui.remote.common.GridListener, java.awt.event.ActionListener, java.lang.Runnable, java.io.Serializable
{

    public void addRemDirListener(org.globus.ogce.beans.filetransfer.gui.remote.gridftp.RemDirListener l)
    {
        remdirlisteners.addElement(l);
    }

    public void removeRemDirListener(org.globus.ogce.beans.filetransfer.gui.remote.gridftp.RemDirListener l)
    {
        remdirlisteners.removeElement(l);
    }

    public void fireRemDirEvent(org.globus.ogce.beans.filetransfer.gui.remote.gridftp.RemDirEvent e, org.globus.ogce.beans.filetransfer.util.DirQueue dirqueue, java.lang.String path, org.globus.ogce.beans.filetransfer.gui.remote.gridftp.GridClient gc)
    {
        java.util.Vector list = (java.util.Vector)remdirlisteners.clone();
        for(int i = 0; i < list.size(); i++)
        {
            org.globus.ogce.beans.filetransfer.gui.remote.gridftp.RemDirListener listener = (org.globus.ogce.beans.filetransfer.gui.remote.gridftp.RemDirListener)list.elementAt(i);
            try
            {
                switch(e.getID())
                {
                case 2: // '\002'
                    listener.dropGridFtp(e, path, gc);
                    break;

                case 3: // '\003'
                    listener.dragGridFtp(e, path, gc);
                    break;

                case 4: // '\004'
                    listener.gridCounter(e, gc);
                    break;
                }
            }
            catch(java.lang.Exception direx)
            {
                direx.printStackTrace();
            }
        }

    }

    public GridClient()
    {
        this(null, true);
        bean = true;
        org.globus.ogce.beans.filetransfer.gui.FileTransferMainPanel.mainPanel.registerRemoteComponent(this, 1);
        remoteTreeFrame.statusOut("Status: Not connected");
    }

    public GridClient(java.lang.String s)
    {
        this(s, false);
    }

    public GridClient(java.lang.String s, boolean bean)
    {
        wndPreload = null;
        isConnected = false;
        put = false;
        status = null;
        url = null;
        this.bean = false;
        remdirlisteners = new Vector();
        remoteTreeFrame = new RemoteTreeFrame(this, bean);
        remoteTreeFrame.setVisible(true);
        setLayout(new GridLayout(1, 1));
        add(remoteTreeFrame);
        setVisible(true);
        remoteTreeFrame.addPropertyChangeListener(this);
        remoteTreeFrame.addGridListener(this);
        txtHost = null;
        txtPort = null;
        host = null;
        port = 2811;
        FileSep = null;
        isConnected = false;
        dlgConnect = null;
        gbc = new GridBagConstraints();
        queue = new DirQueue();
        remoteTreeFrame.setProtocol("gsiftp");
        remoteTreeFrame.setPort(2811);
    }

    public java.lang.String getStatus()
    {
        return status;
    }

    public java.lang.String getUrl()
    {
        return url;
    }

    public void setStatus(java.lang.String status)
    {
        this.status = status;
        remoteTreeFrame.statusOut(status);
    }

    public void setUrl(java.lang.String url)
    {
        this.url = url;
        remoteTreeFrame.setUrl(url);
    }

    public void connectDlg(javax.swing.JFrame frame)
    {
        if(isConnected)
        {
            remoteTreeFrame.statusOut("Connection Exists");
            return;
        } else
        {
            remoteTreeFrame.statusOut("Please wait. Connecting");
            dlgConnect = new JDialog(frame);
            dlgConnect.setTitle("Connect to GridFTP");
            org.globus.tools.ui.util.UITools.center(frame, dlgConnect);
            dlgConnect.addWindowListener(new  Object()     /* anonymous class not found */
    class org.globus.ogce.beans.filetransfer.gui.remote.gridftp._anm1 {}

);
            txtHost = new JTextField(20);
            txtHost.setFont(new Font("Times New Roman", 0, 15));
            txtprofileName = new JTextField(20);
            txtprofileName.setText("2811");
            txtprofileName.setFont(new Font("Times New Roman", 0, 15));
            javax.swing.JLabel jhost = new JLabel("Host ");
            javax.swing.JLabel jprofile = new JLabel("Port  ");
            javax.swing.JButton jbutton = new JButton("ok");
            jbutton.addActionListener(this);
            jbutton.setActionCommand("10");
            javax.swing.JButton jbutton1 = new JButton("cancel");
            jbutton1.addActionListener(this);
            jbutton1.setActionCommand("11");
            javax.swing.JPanel jpanel4 = new JPanel();
            jpanel4.add(jbutton);
            jpanel4.add(jbutton1);
            java.awt.Container container = dlgConnect.getContentPane();
            container.setLayout(new BorderLayout());
            javax.swing.JPanel jp = new JPanel();
            jp.setLayout(new GridBagLayout());
            jp.setPreferredSize(new Dimension(350, 200));
            jp.add(jhost, getGBC(0, 16, 0.29999999999999999D, 1.0D, 0, 2, 1, 2));
            jp.add(txtHost, getGBC(0, 16, 0.69999999999999996D, 0.0D, 1, 3, 4, 1));
            jp.add(jprofile, getGBC(0, 16, 0.29999999999999999D, 1.0D, 0, 4, 1, 2));
            jp.add(txtprofileName, getGBC(0, 16, 0.69999999999999996D, 0.0D, 1, 5, 4, 1));
            jp.add(jpanel4, getGBC(0, 16, 0.29999999999999999D, 1.0D, 1, 7, 1, 2));
            container.add(jp, "Center");
            txtHost.addKeyListener(new  Object()     /* anonymous class not found */
    class org.globus.ogce.beans.filetransfer.gui.remote.gridftp._anm2 {}

);
            txtprofileName.addKeyListener(new  Object()     /* anonymous class not found */
    class org.globus.ogce.beans.filetransfer.gui.remote.gridftp._anm3 {}

);
            dlgConnect.pack();
            dlgConnect.setVisible(true);
            dlgConnect.show();
            return;
        }
    }

    protected java.awt.GridBagConstraints getGBC(int i, int j, double d, double d1, int k, 
            int l, int i1, int j1)
    {
        gbc.fill = i;
        gbc.anchor = j;
        gbc.weightx = d;
        gbc.weighty = d1;
        gbc.gridx = k;
        gbc.gridy = l;
        gbc.gridwidth = i1;
        gbc.gridheight = j1;
        return gbc;
    }

    public void doConnectOK()
    {
        dlgConnect.setVisible(false);
        dlgConnect.dispose();
        dlgConnect.removeAll();
        dlgConnect = null;
        java.lang.System.gc();
        wndPreload = new WindowProgress("Connecting ... Please wait", 25);
        org.globus.ogce.beans.filetransfer.gui.remote.gridftp.GridClient.centerWindow(wndPreload);
        wndPreload.setProgressValue(5);
        try
        {
            port = java.lang.Integer.parseInt(txtprofileName.getText());
        }
        catch(java.lang.Exception e)
        {
            e.printStackTrace(java.lang.System.out);
            remoteTreeFrame.setConnected(false);
        }
        host = txtHost.getText();
        profile = host + ":" + port;
        if(profile.length() <= 0)
            profile = host;
        wndPreload.setProgressValue(8);
        setConnectDetails(true);
    }

    public boolean setConnectDetails(boolean interactive)
    {
        remoteTreeFrame.setProtocol("gsiftp");
        remoteTreeFrame.setHost(host);
        remoteTreeFrame.setPort(port);
        if(wndPreload != null)
            wndPreload.setProgressValue(10);
        boolean isInteractive = interactive;
        java.lang.Thread connectThread = new  Object(isInteractive)     /* anonymous class not found */
    class org.globus.ogce.beans.filetransfer.gui.remote.gridftp._anm4 {}

;
        connectThread.start();
        if(wndPreload != null)
            wndPreload.setProgressValue(24);
        if(wndPreload != null)
        {
            wndPreload.setProgressValue(25);
            wndPreload.setVisible(false);
            wndPreload = null;
        }
        return isConnected;
    }

    public void refresh()
    {
        remoteTreeFrame._actionRefresh();
    }

    public void connectRemote()
    {
        java.lang.System.out.println("\n  HOST = " + host + " port = " + port);
        try
        {
            client = new GridFTPClient(host, port);
            client1 = new GridFTPClient(host, port);
            client2 = new GridFTPClient(host, port);
            client3 = new GridFTPClient(host, port);
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "The host: " + host + "\n or the port number: " + port + " is invalid.\n Please try again. ");
            logger.debug("ServerException instantiating client.");
            logger.debug(fte.getMessage());
            return;
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "The host : " + host + "\n or the port number: " + port + " is invalid.\n  Please try again.");
            logger.debug("IOException instantiating client.");
            logger.debug(ioe.getMessage());
            return;
        }
        if(wndPreload != null)
            wndPreload.setProgressValue(13);
        java.lang.String file = null;
        org.globus.gsi.GlobusCredential credentials = null;
        org.ietf.jgss.GSSCredential proxy = null;
        try
        {
            if(file == null)
                file = org.globus.common.CoGProperties.getDefault().getProxyFile();
            credentials = new GlobusCredential(file);
            proxy = new GlobusGSSCredentialImpl(credentials, 2);
        }
        catch(java.lang.Exception e)
        {
            java.lang.System.err.println("Unable to load the user proxy : " + e.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "No valid Grid proxy certificate.\n\nUse the [Security]->[Create Proxy] menu item\nto create a new certificate.", "Security Message", 2);
            return;
        }
        if(wndPreload != null)
            wndPreload.setProgressValue(16);
        try
        {
            client.authenticate(null);
            client1.authenticate(null);
            client2.authenticate(null);
            client3.authenticate(null);
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            java.lang.System.out.println("aaaaaaaaaaaaaaaa");
            fte.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "No valid Grid proxy certificate.\n\nUse the [Security]->[Create Proxy] menu item\nto create a new certificate.", "Security Message", 2);
            logger.debug("Credentials are not valid. Use the Security menu");
            logger.debug(fte.getMessage());
            return;
        }
        catch(java.io.IOException ioe)
        {
            java.lang.System.out.println("bbbbbbbbbbbbbbbbbbbb");
            ioe.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "No valid Grid proxy certificate.\n\nUse the [Security]->[Create Proxy] menu item\nto create a new certificate.", "Security Message", 2);
            logger.debug("Credentials are not valid. Use the Security Menu");
            logger.debug(ioe.getMessage());
            return;
        }
        if(wndPreload != null)
            wndPreload.setProgressValue(18);
        try
        {
            client.setDataChannelAuthentication(org.globus.ftp.DataChannelAuthentication.NONE);
            client1.setDataChannelAuthentication(org.globus.ftp.DataChannelAuthentication.NONE);
            client2.setDataChannelAuthentication(org.globus.ftp.DataChannelAuthentication.NONE);
            client3.setDataChannelAuthentication(org.globus.ftp.DataChannelAuthentication.NONE);
            logger.debug("Setting Data Channel Authorization to none.");
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error setting Data Channel Authentication.");
            return;
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error setting Data Channel Authentication.");
            return;
        }
        if(wndPreload != null)
            wndPreload.setProgressValue(20);
        isConnected = true;
        remoteTreeFrame.setConnected(true);
    }

    public void disconnect()
    {
        remoteTreeFrame._actionDisconnect();
    }

    public boolean createClient(org.globus.ftp.GridFTPClient newClient)
    {
        try
        {
            newClient = null;
            newClient = new GridFTPClient(host, port);
            newClient.authenticate(null);
        }
        catch(java.lang.Exception e)
        {
            return false;
        }
        return true;
    }

    public java.lang.String getCurrentDir()
    {
        try
        {
            remoterootDir = client.getCurrentDir();
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            logger.debug("ServerException getting remote root directory.");
            java.lang.String errorMsg = fte.getMessage();
            if(errorMsg.indexOf("Timeout") > 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                remoteTreeFrame.setConnected(false);
            }
            logger.debug(errorMsg);
            return null;
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
            logger.debug("IOException getting remote root directory.");
            logger.debug(ioe.getMessage());
            remoteTreeFrame.setConnected(false);
            return null;
        }
        catch(java.lang.Exception ioe)
        {
            logger.debug("Exception getting remote root directory.");
            logger.debug(ioe.getMessage());
            return null;
        }
        remoteTreeFrame.setServerOpSys(1);
        return remoterootDir;
    }

    public void disconnectRemote(boolean connectionAndGUI)
    {
        if(client != null || client1 != null || client2 != null || client3 != null)
            try
            {
                client.close();
                client = null;
                if(client1 != null)
                {
                    client1.close();
                    client1 = null;
                }
                if(client2 != null)
                {
                    client2.close();
                    client2 = null;
                }
                if(client3 != null)
                {
                    client3.close();
                    client3 = null;
                }
            }
            catch(org.globus.ftp.exception.ServerException fte)
            {
                logger.debug("ServerException disconnecting.");
                logger.debug(fte.getMessage());
            }
            catch(java.io.IOException ioe)
            {
                logger.debug("IOException disconnecting.");
                logger.debug(ioe.getMessage());
            }
        if(isConnected)
            isConnected = false;
        if(connectionAndGUI)
        {
            java.lang.System.gc();
            fireRemDirEvent(new RemDirEvent(this, 4), null, "", this);
        }
        logger.debug("Returned correctly after disconnect.");
    }

    public void propertyChange(java.beans.PropertyChangeEvent evt)
    {
        java.lang.System.out.println("\n In the property change method.");
        host = remoteTreeFrame.getHost();
        remoteTreeFrame.statusOut("Connecting. Please wait ....");
        isConnected = false;
        setConnectDetails(true);
        logger.debug("Remote url changed.display the authorization dialog ");
    }

    public java.util.Vector listDir(java.lang.String dirname)
    {
        logger.debug("\nEntered the listdir function in grid client.");
        java.util.Vector listing = null;
        if(client1 == null)
        {
            logger.debug("Client null...Trying to create a new instance");
            try
            {
                client1 = new GridFTPClient(host, port);
                client1.authenticate(null);
                client1.setDataChannelAuthentication(org.globus.ftp.DataChannelAuthentication.NONE);
            }
            catch(java.lang.Exception e)
            {
                logger.debug("Client null...Failed the trial to create one.");
                remoteTreeFrame.setConnected(false);
                return null;
            }
        }
        try
        {
            client1.setClientWaitParams(0xaba9500, 300);
            client1.changeDir(dirname);
            client1.setPassive();
            client1.setLocalActive();
            client1.setLocalNoDataChannelAuthentication();
            logger.debug("\nSET THE PARAMETERS." + client1);
            listing = client1.list();
            logger.debug("Returned correctly from list.");
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            logger.debug("ServerException listing directory." + client1);
            fte.printStackTrace(java.lang.System.out);
            java.lang.String errorMsg = fte.getMessage();
            if(errorMsg.indexOf("Timeout") > 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                remoteTreeFrame.setConnected(false);
            }
            logger.debug(errorMsg);
            return null;
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
            logger.debug("IOException listing directory.");
            logger.debug(ioe.getMessage());
            ioe.printStackTrace(java.lang.System.out);
            remoteTreeFrame.setConnected(false);
            return null;
        }
        catch(java.lang.Exception ioe)
        {
            logger.debug("Exception listing the remote directory.");
            logger.debug(ioe.getMessage());
            ioe.printStackTrace(java.lang.System.out);
            return null;
        }
        return listing;
    }

    public java.util.Vector listAllDir(java.lang.String dirname)
    {
        java.util.Vector listing = null;
        java.util.Vector list = new Vector();
        if(client == null)
        {
            logger.debug("Client null...Trying to create a new instance");
            try
            {
                client = new GridFTPClient(host, port);
                client.authenticate(null);
                client.setDataChannelAuthentication(org.globus.ftp.DataChannelAuthentication.NONE);
            }
            catch(java.lang.Exception e)
            {
                logger.debug("Client null...Failed the trial to create one.");
                remoteTreeFrame.setConnected(false);
                return null;
            }
        }
        java.io.ByteArrayOutputStream received = new ByteArrayOutputStream(1000);
        java.lang.String output = null;
        try
        {
            client.setClientWaitParams(0xaba9500, 300);
            client.changeDir(dirname);
            client.setPassive();
            client.setLocalActive();
            client.setLocalNoDataChannelAuthentication();
            client.list("*", "-d", new  Object(received)     /* anonymous class not found */
    class org.globus.ogce.beans.filetransfer.gui.remote.gridftp._anm5 {}

);
            output = received.toString();
            logger.debug("\nReceived of directory listing\n" + output);
            java.io.BufferedReader reader = new BufferedReader(new StringReader(received.toString()));
            for(java.lang.String line = null; (line = reader.readLine()) != null;)
                if(!line.startsWith("total"))
                {
                    list.addElement(line);
                    logger.debug("\nline = " + line);
                }

            listing = list;
        }
        catch(java.lang.Exception e)
        {
            logger.debug("Parameterized list also failed");
            e.printStackTrace(java.lang.System.out);
        }
        return listing;
    }

    public java.util.Vector listTransferDir(java.lang.String dirname)
    {
        java.util.Vector listing = null;
        if(client2 == null)
        {
            logger.debug("Client null...Trying to create a new instance");
            try
            {
                client2 = new GridFTPClient(host, port);
                client2.authenticate(null);
                client2.setDataChannelAuthentication(org.globus.ftp.DataChannelAuthentication.NONE);
            }
            catch(java.lang.Exception e)
            {
                logger.debug("Client null...Failed the trial to create one.");
                javax.swing.JOptionPane.showMessageDialog(this, "Please drag a smallerdirectory.\n Server is not to remain connected.");
                remoteTreeFrame.setConnected(false);
                return null;
            }
        }
        try
        {
            client2.setClientWaitParams(0xaba9500, 300);
            client2.changeDir(dirname);
            client2.setPassive();
            client2.setLocalActive();
            client2.setLocalNoDataChannelAuthentication();
            listing = client2.list();
            logger.debug("Returned correctly from list.");
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            logger.debug("ServerException listing directory.");
            fte.printStackTrace(java.lang.System.out);
            java.lang.String errorMsg = fte.getMessage();
            if(errorMsg.indexOf("Timeout") > 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                remoteTreeFrame.setConnected(false);
            }
            logger.debug(errorMsg);
            return null;
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
            logger.debug("IOException listing directory.");
            logger.debug(ioe.getMessage());
            ioe.printStackTrace(java.lang.System.out);
            remoteTreeFrame.setConnected(false);
            return null;
        }
        catch(java.lang.Exception ioe)
        {
            logger.debug("Exception listing the remote directory.");
            logger.debug(ioe.getMessage());
            ioe.printStackTrace(java.lang.System.out);
            return null;
        }
        return listing;
    }

    public java.util.Vector listDeleteDir(java.lang.String dirname)
    {
        java.util.Vector listing = null;
        if(client3 == null)
        {
            logger.debug("Client null...returning from listCurrentDirectory");
            try
            {
                client3 = new GridFTPClient(host, port);
                client3.authenticate(null);
                client3.setDataChannelAuthentication(org.globus.ftp.DataChannelAuthentication.NONE);
            }
            catch(java.lang.Exception e)
            {
                logger.debug("Client null...Failed the trial to create one.");
                remoteTreeFrame.setConnected(false);
                return null;
            }
        }
        try
        {
            client3.setClientWaitParams(0xaba9500, 300);
            client3.changeDir(dirname);
            client3.setPassive();
            client3.setLocalActive();
            client3.setLocalNoDataChannelAuthentication();
            listing = client3.list();
            logger.debug("Returned correctly from list.");
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            logger.debug("ServerException listing directory.");
            java.lang.String errorMsg = fte.getMessage();
            if(errorMsg.indexOf("Timeout") > 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                remoteTreeFrame.setConnected(false);
            }
            logger.debug(errorMsg);
            return null;
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
            logger.debug("IOException listing directory.");
            logger.debug(ioe.getMessage());
            ioe.printStackTrace(java.lang.System.out);
            remoteTreeFrame.setConnected(false);
            return null;
        }
        catch(java.lang.Exception ioe)
        {
            logger.debug("Exception listing the remote directory.");
            logger.debug(ioe.getMessage());
            ioe.printStackTrace(java.lang.System.out);
            return null;
        }
        return listing;
    }

    public void pwd()
    {
        try
        {
            client.getCurrentDir();
            logger.debug("Returned correctly from pwd.");
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            logger.debug("ServerException showing pwd.");
            java.lang.String errorMsg = fte.getMessage();
            if(errorMsg.indexOf("Timeout") > 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                remoteTreeFrame.setConnected(false);
            }
            logger.debug(errorMsg);
            return;
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
            logger.debug("IOException showing pwd.");
            logger.debug(ioe.getMessage());
            remoteTreeFrame.setConnected(false);
            return;
        }
    }

    public void get(java.lang.String s, java.io.File file)
    {
    }

    public void put(java.io.File file, java.lang.String s)
    {
    }

    public boolean chdir(java.lang.String s)
    {
        try
        {
            client.changeDir(s);
            logger.debug("Returned correctly from change dir command");
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            logger.debug("ServerException during change dir command.");
            java.lang.String errorMsg = fte.getMessage();
            if(errorMsg.indexOf("Timeout") > 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                remoteTreeFrame.setConnected(false);
            }
            logger.debug(errorMsg);
            return false;
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
            logger.debug("IOException during change dir command.");
            logger.debug(ioe.getMessage());
            remoteTreeFrame.setConnected(false);
            return false;
        }
        catch(java.lang.Exception ioe)
        {
            logger.debug("Exception during change dir command.");
            logger.debug(ioe.getMessage());
            return false;
        }
        return true;
    }

    public void setType(boolean flag)
    {
        if(flag)
            try
            {
                client.setType(2);
                logger.debug("Returned correctly from setType.");
            }
            catch(org.globus.ftp.exception.ServerException fte)
            {
                logger.debug("ServerException during  setType.");
                java.lang.String errorMsg = fte.getMessage();
                if(errorMsg.indexOf("Timeout") > 0)
                {
                    javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                    remoteTreeFrame.setConnected(false);
                }
                logger.debug(errorMsg);
                return;
            }
            catch(java.io.IOException ioe)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
                logger.debug("IOException during  setType.");
                logger.debug(ioe.getMessage());
                remoteTreeFrame.setConnected(false);
                return;
            }
        else
            try
            {
                client.setType(1);
                logger.debug("Returned correctly from  setType.");
            }
            catch(org.globus.ftp.exception.ServerException fte)
            {
                logger.debug("ServerException during  setType.");
                java.lang.String errorMsg = fte.getMessage();
                if(errorMsg.indexOf("Timeout") > 0)
                {
                    javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                    remoteTreeFrame.setConnected(false);
                }
                logger.debug(errorMsg);
                return;
            }
            catch(java.io.IOException ioe)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
                logger.debug("IOException  in setType.");
                logger.debug(ioe.getMessage());
                remoteTreeFrame.setConnected(false);
                return;
            }
    }

    public boolean rename(java.lang.String s, java.lang.String s1)
    {
        try
        {
            client.rename(s, s1);
            logger.debug("Returned correctly from rename.");
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            logger.debug("ServerException renaming directory.");
            java.lang.String errorMsg = fte.getMessage();
            if(errorMsg.indexOf("Timeout") > 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                remoteTreeFrame.setConnected(false);
            }
            logger.debug(errorMsg);
            return false;
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
            logger.debug("IOException renaming directory.");
            logger.debug(ioe.getMessage());
            ioe.printStackTrace(java.lang.System.out);
            remoteTreeFrame.setConnected(false);
            return false;
        }
        return true;
    }

    public boolean exists(java.lang.String s1)
    {
        return client.exists(s1);
        org.globus.ftp.exception.ServerException fte;
        fte;
        logger.debug("ServerException renaming directory.");
        java.lang.String errorMsg = fte.getMessage();
        if(errorMsg.indexOf("Timeout") > 0)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
            remoteTreeFrame.setConnected(false);
        }
        logger.debug(errorMsg);
        return false;
        java.io.IOException ioe;
        ioe;
        javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
        logger.debug("IOException renaming directory.");
        logger.debug(ioe.getMessage());
        ioe.printStackTrace(java.lang.System.out);
        remoteTreeFrame.setConnected(false);
        return false;
    }

    public boolean mkdir(java.lang.String s)
    {
        try
        {
            if(!exists(s))
            {
                client.makeDir(s);
                logger.debug("Returned correctly from make directory.");
            } else
            {
                java.lang.System.out.println("The already directory exists");
            }
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            logger.debug("Directory exists or Permission denied.");
            java.lang.String errorMsg = fte.getMessage();
            if(errorMsg.indexOf("exists") > 0)
            {
                remoteTreeFrame.setError("exists");
                return true;
            }
            if(errorMsg.indexOf("Timeout") > 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                remoteTreeFrame.setConnected(false);
                logger.debug(errorMsg);
                return false;
            } else
            {
                logger.debug(errorMsg);
                return false;
            }
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
            logger.debug("No network connection or Firewall prevents it.");
            logger.debug(ioe.getMessage());
            remoteTreeFrame.setConnected(false);
            return false;
        }
        return true;
    }

    public boolean mkdirs(java.lang.String dir, java.lang.String path)
    {
        int index = dir.lastIndexOf("/");
        int index1 = path.lastIndexOf("/");
        logger.info("\nSTART DIR = " + dir + "  index = " + index);
        logger.info("\npath = " + path + " index1 = " + index1);
        logger.info("\nMAKING DIR = " + path.substring(0, index1));
        if(index1 > index)
            mkdirs(dir, path.substring(0, index1));
        return mkdir(path);
        java.lang.Exception e;
        e;
        return true;
    }

    public boolean removeDir(java.lang.String s)
    {
        try
        {
            client.deleteDir(s);
            logger.debug("Returned correctly after deleting directory.");
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            logger.debug("ServerException deleting directory.");
            java.lang.String errorMsg = fte.getMessage();
            if(errorMsg.indexOf("Timeout") > 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                remoteTreeFrame.setConnected(false);
            }
            logger.debug(errorMsg);
            return false;
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
            logger.debug("IOException deleting directory.");
            logger.debug(ioe.getMessage());
            remoteTreeFrame.setConnected(false);
            return false;
        }
        return true;
    }

    public boolean removeFile(java.lang.String s)
    {
        try
        {
            client.deleteFile(s);
            logger.debug("Returned correctly after deleting file.");
        }
        catch(org.globus.ftp.exception.ServerException fte)
        {
            logger.debug("ServerException deleting file.");
            java.lang.String errorMsg = fte.getMessage();
            if(errorMsg.indexOf("Timeout") > 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Connection Timed Out");
                remoteTreeFrame.setConnected(false);
            }
            logger.debug(errorMsg);
            return false;
        }
        catch(java.io.IOException ioe)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Disconnected due to Network problems");
            logger.debug("IOException deleting file.");
            logger.debug(ioe.getMessage());
            remoteTreeFrame.setConnected(false);
            return false;
        }
        return true;
    }

    public void setHost(java.lang.String host)
    {
        this.host = host;
    }

    public java.lang.String getHost()
    {
        return host;
    }

    public void setPort(int port)
    {
        this.port = port;
    }

    public int getPort()
    {
        return port;
    }

    public void rootDirRemote()
    {
        remoteTreeFrame.setRootRemote(remoterootDir);
    }

    public java.lang.String getRootURL()
    {
        return remoteTreeFrame.getBaseUrl();
    }

    public void setDragDetails(org.globus.ogce.beans.filetransfer.gui.remote.common.GridEvent e, java.lang.String from)
    {
        remoteTreeFrame.statusOut("Copying the file ...");
        fireRemDirEvent(new RemDirEvent(this, 3), null, from, this);
    }

    public void setDropDetails(org.globus.ogce.beans.filetransfer.gui.remote.common.GridEvent e, java.lang.String to)
    {
        fireRemDirEvent(new RemDirEvent(this, 2), null, to, this);
    }

    public void setSelectedSource()
    {
        remoteTreeFrame.right.setSelectedSource();
    }

    public void setSelectedDestination()
    {
        remoteTreeFrame.right.setSelectedDestination();
    }

    public void transfer()
    {
        remoteTreeFrame.right.transfer();
    }

    public void callGridEditFrame(org.globus.ogce.beans.filetransfer.gui.remote.common.GridEvent gridevent, java.lang.String s, java.lang.String as[])
    {
    }

    public void run()
    {
        doConnectOK();
    }

    public void actionPerformed(java.awt.event.ActionEvent ae)
    {
        java.lang.String s = ae.getActionCommand();
        int i = 0;
        try
        {
            i = java.lang.Integer.valueOf(s).intValue();
        }
        catch(java.lang.NumberFormatException numberformatexception)
        {
            remoteTreeFrame.statusOut("Action Error: " + numberformatexception.getMessage());
        }
        switch(i)
        {
        default:
            break;

        case 10: // '\n'
            java.lang.Thread connect = new Thread(this);
            connect.start();
            remoteTreeFrame.statusOut("Connecting ... Please wait");
            break;

        case 11: // '\013'
            if(!bean)
                remoteTreeFrame.setConnected(false);
            dlgConnect.dispose();
            break;
        }
    }

    public static void centerWindow(java.awt.Window guiComponent)
    {
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension frameSize = guiComponent.getSize();
        if(frameSize.height > screenSize.height)
            frameSize.height = screenSize.height;
        if(frameSize.width > screenSize.width)
            frameSize.width = screenSize.width;
        guiComponent.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
    }

    public static void main(java.lang.String arg[])
    {
        org.globus.ogce.beans.filetransfer.gui.remote.gridftp.GridClient gridftpPanel = new GridClient();
        javax.swing.JFrame sFrame = new JFrame("Remote FTP System:  " + arg[0]);
        sFrame.getContentPane().setLayout(new GridLayout(1, 1));
        sFrame.getContentPane().add(gridftpPanel);
        sFrame.pack();
        sFrame.setSize(300, 400);
        sFrame.setVisible(true);
        org.globus.tools.ui.util.UITools.center(null, sFrame);
        gridftpPanel.setHost(arg[0]);
        gridftpPanel.setConnectDetails(true);
    }

    private static org.apache.log4j.Logger logger;
    private org.globus.ftp.GridFTPClient client;
    private org.globus.ftp.GridFTPClient client1;
    private org.globus.ftp.GridFTPClient client2;
    private org.globus.ftp.GridFTPClient client3;
    org.globus.ogce.beans.filetransfer.gui.monitor.WindowProgress wndPreload;
    private final int GRID_FTP_PORT = 2811;
    public java.lang.String host;
    private int port;
    private java.lang.String profile;
    public org.globus.ogce.beans.filetransfer.gui.remote.common.RemoteTreeFrame remoteTreeFrame;
    public java.lang.String remoterootDir;
    public boolean isConnected;
    public boolean busy;
    private boolean put;
    protected javax.swing.JTextField txtHost;
    protected javax.swing.JTextField txtPort;
    protected javax.swing.JTextField txtUName;
    protected javax.swing.JTextField txtprofileName;
    public javax.swing.JDialog dlgConnect;
    private java.lang.String FileSep;
    private java.awt.GridBagConstraints gbc;
    private org.globus.ogce.beans.filetransfer.util.DirQueue queue;
    private java.lang.String status;
    private java.lang.String url;
    private boolean bean;
    protected java.util.Vector remdirlisteners;

    static 
    {
        logger = org.apache.log4j.Logger.getLogger(org.globus.ogce.beans.filetransfer.gui.remote.gridftp.GridClient.class.getName());
    }
}
