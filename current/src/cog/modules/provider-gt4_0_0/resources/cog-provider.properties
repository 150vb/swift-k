
classloader.name=gt4

#if set to true, the cog factory will use the system class loader
classloader.usesystem=false

#if not set, the cog factory will still use the system class loader (same as classloader.usesystem=true)
classloader.properties=classloader-gt4_0_0.properties

#if set, the static boot() method will be called on that class when the loader is initialized
#classloader.boot=org.globus.cog.abstraction.impl.execution.gt4_0_0.Boot

#sandboxing is a way to keep class trees separated between class loaders
#the most portable way (axis, commons-discovery) seems to be having a separate
#thread with a context class loader. If true, and unless the system class loader
#is used above, all calls into provider specific implementations will be made
#through a separate thread.
sandbox=true

sandbox.boot=org.globus.cog.abstraction.impl.execution.gt4_0_0.Boot



#the name of the provider
provider=gt4

#this is where client-server-config.wsdd will be looked for
config.path=${user.home}/.globus/cog-provider-gt4_0_0-2/

#this is where ogsa.properties will be looked for
globus.location=${user.home}/.globus/cog-provider-gt4_0_0-2/

#this is where the local server will fetch things from (in particular schemas)
server.webroot=${user.home}/.globus/cog-provider-gt4_0_0-2/

#the location of the schemas. The second one is used for backwards compatibility
#with cog2 style providers.
schema.location=${user.home}/.globus/cog-provider-gt4_0_0-2/share/schema/
SCHEMA_LOCATION=${user.home}/.globus/cog-provider-gt4_0_0-2/share/schema/

executionTaskHandler=org.globus.cog.abstraction.impl.execution.gt4_0_0.TaskHandlerImpl
securityContext=org.globus.cog.abstraction.impl.execution.gt4_0_0.GlobusSecurityContextImpl

alias=gt3.9.5:gt4
alias=gt4.0.0:gt4
alias=gt4.0.1:gt4
alias=gt4.0.2:gt4
