--- src/com/sshtools/j2ssh/transport/TransportProtocolOutputStream.java.orig	2003-12-08 13:54:52.000000000 +0100
+++ src/com/sshtools/j2ssh/transport/TransportProtocolOutputStream.java	2004-06-22 16:45:59.000000000 +0200
@@ -178,7 +178,6 @@
             out.write(message.toByteArray());
 
             out.flush();
-            algorithms.release();
 
             // Increment the sequence no
             if (sequenceNo < sequenceWrapLimit) {
@@ -192,5 +191,8 @@
                     ioe.getMessage());
             }
         }
+        finally {
+            algorithms.release();
+        }
     }
 }
--- src/com/sshtools/j2ssh/transport/TransportProtocolCommon.java.orig	2003-12-08 13:54:52.000000000 +0100
+++ src/com/sshtools/j2ssh/transport/TransportProtocolCommon.java	2004-06-22 17:53:57.000000000 +0200
@@ -795,15 +795,31 @@
         // weve updated them with the new keys
         algorithmsOut.lock();
 
-        int[] filter = new int[1];
-        filter[0] = SshMsgNewKeys.SSH_MSG_NEWKEYS;
-        msg = (SshMsgNewKeys) readMessage(filter);
-
-        if (log.isDebugEnabled()) {
-            log.debug("Received " + msg.getMessageName());
+        // Do we need to hold the algorithmsOut lock during
+        // the input message handling below? If not, then the 
+        // lock could be taken just before completeKeyExchange 
+        // or even moved into the completeKeyExchange method.
+        // We would then not need the try-finally below (which
+        // is needed for exceptions from eg the readMessage call).
+        boolean hasReleasedLock = false;
+        try {
+            int[] filter = new int[1];
+            filter[0] = SshMsgNewKeys.SSH_MSG_NEWKEYS;
+            msg = (SshMsgNewKeys) readMessage(filter);
+            
+            if (log.isDebugEnabled()) {
+                log.debug("Received " + msg.getMessageName());
+            }
+            
+            // Release done in completeKeyExchange
+            hasReleasedLock = true;
+            completeKeyExchange();
+        }
+        finally {
+            if( ! hasReleasedLock ) {
+                algorithmsOut.release();
+            }
         }
-
-        completeKeyExchange();
     }
 
     /**
@@ -836,6 +852,7 @@
     protected void completeKeyExchange() throws IOException {
         log.info("Completing key exchange");
 
+        boolean hasReleasedLock = false;
         try {
             // Reset the state variables
             //completeOnNewKeys = new Boolean(false);
@@ -858,6 +875,7 @@
 
             //algorithmsIn.release();
             algorithmsOut.release();
+            hasReleasedLock = true;
 
             /*
              *  Update our state, we can send all packets
@@ -900,6 +918,11 @@
                 "The connection was disconnected because" +
                 " of an algorithm initialization error");
         }
+        finally {
+            if( ! hasReleasedLock ) {
+                algorithmsOut.release();
+            }
+        }
     }
 
     /**
@@ -1220,10 +1243,13 @@
     private void onMsgNewKeys(SshMsgNewKeys msg) throws IOException {
         // Determine whether we have completed our own
         log.debug("Received New Keys");
-        algorithmsIn.lock();
+        //algorithmsIn.lock();
 
         synchronized (completeOnNewKeys) {
             if (completeOnNewKeys.booleanValue()) {
+                // We need to take this lock since
+                // it is released in completeKeyExchange.
+                algorithmsOut.lock();
                 completeKeyExchange();
             } else {
                 completeOnNewKeys = new Boolean(true);

 	  	 
