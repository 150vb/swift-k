Amazon EC2 Cloud
----------------
Amazon EC2 offers virtualized resources on demand from its cloud data centers.
This section describes how to use Swift to run applications on EC2 resources.
More information on EC2 can be found link:https://aws.amazon.com/ec2[here].

Getting Access
~~~~~~~~~~~~~~

 ==Users with EC2 Allocation

If you already have an EC2 allocation, you can use either the web console or command-line interface to manage resources.

Before using EC2 for Swift you must create a security group in order to allow
Swift communicate with EC2 instances via open ports. In order to create a
security group, follow instructions
link:http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html#creating-security-group[here].
Preferably, open ports between 50000 and 51000.

Paste your credentials from the EC2 web console into AWS_ACCESS_KEY and AWS_SECRET_KEY and export them in your .bashrc as follows:

----
export AWS_ACCESS_KEY=<your access key>
export AWS_SECRET_KEY=<your secret key>
----

Command-line tools are pre-installed on +swift.rcc.uchicago.edu+. In order to use them add the following lines to your .bashrc:

----
export EC2_HOME=/home/maheshwari/.ec2
export PATH=$PATH:$EC2_HOME/bin
----

A public AMI on EC2 is available to create instance. The id of this AMI is: ami-332e585a.

Create instances from the above AMI as follows:

----
ec2run -k <keypair_name> -g <sec_group_name> -n <count> ami-332e585a
----

 ==Users without EC2 Allocation

Please request access to prepared instances and PKI credentials by mailing: email@mcs.anl.gov.



Configuring coaster-service.conf
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To run on EC2, you will need a file called coaster-service.conf.
This file contains many options to control how things run. Here is
an example of a working coaster-service.conf for EC2.

-----
#Location of SWIFT. If empty, PATH is referenced
export SWIFT=

# Where to place/launch worker.pl on the remote machine for sites.xml
export WORKER_LOCATION=/root

# How to launch workers: local, ssh, or cobalt
export WORKER_MODE=ssh

# Worker logging setting passed to worker.pl for sites.xml
export WORKER_LOGGING_LEVEL=DEBUG

export SSH_TUNNELING=yes

# User name to use for all systems
export WORKER_USERNAME=root

# Worker host names for ssh
# export WORKER_HOSTS="crush thwomp" 

# Directory to keep log files,
#relative to working directory when launching start-coaster-service
export LOG_DIR=logs
export WORKER_LOG_DIR=/root

# Manually define ports. If not specified, ports will be automatically generated
export LOCAL_PORT=50100
export SERVICE_PORT=50200

# Set shared filesystem to no since work will be done in local /sandbox directory
export SHARED_FILESYSTEM=no

# Below are various settings to give information about how to create sites.xml
export WORK=/tmp/swift.work
export JOBSPERNODE=4
export JOBTHROTTLE=$( echo "scale=5; ($JOBS_PER_NODE * $( echo $WORKER_HOSTS|wc -w ))/100 - 0.00001"|bc )

# Swift applications
#app cat=/bin/cat
#app bash=/bin/bash
-----
Add a list of any applications you want to run in the format "#app myapp=/path/to/app".

Starting the Coaster Service Script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now that everything is configured, run this command to start the coaster service:

-----
source setup
-----

This command will add the instances to coaster configuration, start the
required processes on the worker nodes, and generate Swift configuration files
for you to use. The configuration files will be generated in your current
directory. These files are sites.xml, tc.data, and cf.

Running Swift
~~~~~~~~~~~~~

Log in to the +swift.rcc.uchicago.edu+ and copy the swift_cloud directory to your home:

----
cp -r ~maheshwari/swift_cloud $HOME/
----

Replace the hosts.txt by adding the address/DNS of instances.

Now that you have all of your configuration files generated, run the following command:

-----
$ swift -sites.file sites.xml -tc.file tc.data -config cf catsn.swift
-----

If you like to create a custom tc and/or cf file for repeated use, rename it to something other
than tc.data/cf to prevent it from being overwritten. The sites.xml however will need to be
regenerated every time you start the coaster service. If you need to repeatedly modify some
sites.xml options, you may edit the template in Swift's etc/sites/persistent-coasters. You
may also create your own custom tc files with the hostname of persistent-coasters. More
information about this can be found in the Swift userguide at
http://www.ci.uchicago.edu/swift/guides/trunk/userguide/userguide.html.

Stopping the Coaster Service Script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To stop the coaster service, run the following command:
-----
$ stop-coaster-service
-----

This will kill the coaster service, kill the worker scripts on remote systems.

Terminate the virtual machines that were created for this work as follows:

----
ec2din|grep running|awk '{print $2}'|xargs ec2kill
----

More Help
~~~~~~~~~
The best place for additional help is the Swift user mailing list. You can subscribe to this list at
http://mail.ci.uchicago.edu/mailman/listinfo/swift-user. When submitting information, send
your sites.xml file, your tc.data, and any error messages you run into.

