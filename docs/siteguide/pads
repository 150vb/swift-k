PADS
----

PADS Quickstart
~~~~~~~~~~~~~~~
This section will walk you through running a simple Swift script
on PADS.

In your home directory, edit a file called .soft and add these
lines (in this order):
-----
+java-sun
+maui
+torque
@default
-----

Log out of PADS, and log back in.

Next, paste the example below into a file called sites.xml.

-----
include::../../tests/providers/PADS/coasters/sites.template.xml[]
-----

Create a directory called swiftwork. Modify _WORK_ in sites.xml
to point to this new directory. For example
-----
<workdirectory>/home/myhome/swiftwork</workdirectory>
-----

Next, paste the following example into a file called tc.data

-----
include::../../tests/providers/PADS/coasters/tc.template.data[]
-----

Copy the catsn Swift script and input text file into your current directory
-----
$ cp ~/swift-0.93/examples/misc/catsn.swift .
$ cp ~/swift-0.93/examples/misc/data.txt .
-----
TIP: The location of your swift directory may vary depending on how you installed it. Change this to the examples/misc directory of your installation as needed.

And finally, run the script
-----
$ swift -sites.file sites.xml -tc.file tc.data catsn.swift
-----

You should see 10 new text files get created, named catsn*.out. If
you see these files, then you have succesfully run Swift on PADS!

TIP: Make sure your default project is defined. Read on for more information.

Requesting Access
~~~~~~~~~~~~~~~~~
If you do not already have a Computation Institute account, you can request
one at https://www.ci.uchicago.edu/accounts. This page will give you a list
of resources you can request access to. Be sure that PADS is selected. If
you already have an existing CI account, but do not have access to PADS,
send an email to support@ci.uchicago.edu to request access.

SSH Keys
~~~~~~~~
Before accessing PADS, be sure to have your SSH keys configured correctly.
There is some basic information about SSH and how to generate your key at
http://www.ci.uchicago.edu/wiki/bin/view/Resources/SshKeys. Once you have
followed those instructions, you can add your key at
https://www.ci.uchicago.edu/support/sshkeys/.

Connecting to a login node
~~~~~~~~~~~~~~~~~~~~~~~~~~
Once your keys are configured, you should be able to access a PADS login
node with the following command:

-----
ssh yourusername@login.pads.ci.uchicago.edu
-----

Configuring softenv
~~~~~~~~~~~~~~~~~~~
Softenv is a system used for managing applications. In order to run Swift,
the softenv environment will have to be modified slightly. Softenv is 
configured by a file in your home directory called .soft. Edit this file
to look like this:
-----
+java-sun
+maui
+torque
@default
-----

What You Need To Know Before Running Swift
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Before you can create a Swift configuration file, there are some things
you will need to know.

Swift Work Directory
^^^^^^^^^^^^^^^^^^^^
The Swift work directory is a directory which Swift uses for processing work.
This directory needs to be writable. Common options for this are:

-----
/home/username/swiftwork
/home/username/work
/tmp
-----

Which project(s) are you a member of?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
PADS requires that you are a member of a project. You can determine this by
running the following command:

-----
$ projects --available

The following projects are available for your use

Project      PI                      Title

CI-CCR000013 Michael Wilde           The Swift Parallel Scripting System
-----

If you are not a member of a project, you must first request access
to a project at http://www.ci.uchicago.edu/hpc/projects.

You should make sure that you have a project set as default. Run
the projects command with no arguments to determine if you have a default.

------
$ projects
You have no default project set.
-----

To set your default project, use projects --set
------
$ projects --set CI-CCR000013 --all
Your default project for all CI clusters has been set to CI-CCR000013.
-----

Determine your Queue
^^^^^^^^^^^^^^^^^^^^

PADS has several different queues you can submit jobs to depending on
the type of work you will be doing. The command "qstat -q" will print
the most up to date list of this information.

.PADS Queues
[options="header"]
|=========================================================
|Queue   |Memory|CPU Time|Walltime|Node|Run|Que|Lm  |State
|route   |--    |--      |--      |--  |  0|  0|--  | E R
|short   |--    |--      |04:00:00|--  | 64|  0|--  | E R
|extended|--    |--      |--      |--  |  0|  0|--  | E R
|fast    |--    |--      |01:00:00|1   |  0|152|--  | E R
|long    |--    |--      |24:00:00|--  |232|130|--  | E R
|=========================================================

Generating Configuration Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now that you know what queue to use, your project, and your work directory, it is time to
set up Swift. Swift uses a configuration file called sites.xml to determine how it should run.
There are two methods you can use for creating this file. You can manually edit
the configuration file, or generate it with a utility called gensites.

Manually Editing sites.xml
^^^^^^^^^^^^^^^^^^^^^^^^^^
Below is the template that is used by Swift's test suite for running on PADS.

-----
include::../../tests/providers/PADS/coasters/sites.template.xml[]
-----

Before you can use this configuration file, you will need to modify _WORK_ to a directory writable by you, 
and have your default project defined. Copy this template, replace _WORK_, and then save as sites.xml.

Manually Editing tc.data
~~~~~~~~~~~~~~~~~~~~~~~~
Below is the tc.data file used by Swift's test suite for running on PADS.

-----
include::../../tests/providers/PADS/coasters/tc.template.data[]
------

Copy these commands and save it as tc.data.

Catsn.swift
~~~~~~~~~~~
The swift script we will run is called catsn.swift. It simply cats a file and saves the result. This is a nice simple test to ensure jobs are running correctly. Create a file called data.txt which contains some simple input - a "hello world" will do the trick.

-----
include::../../examples/misc/catsn.swift[]
-----

Running Swift
~~~~~~~~~~~~~
Now that everything is in place, run Swift with the following command:

-----
swift -sites.file sites.xml -tc.file tc.data catsn.swift -n=10
-----

You should see several new files being created, called catsn.0001.out, catsn.0002.out, etc. Each of these
files should contain the contents of what you placed into data.txt. If this happens, your job has run
successfully on PADS!

More Help
~~~~~~~~~
The best place for additional help is the Swift user mailing list. You can subscribe to this list at
https://lists.ci.uchicago.edu/cgi-bin/mailman/listinfo/swift-user. When submitting information, please send your sites.xml file, your tc.data, and any Swift log files that were created during your attempt.


