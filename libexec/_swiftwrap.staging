# this script must be invoked inside of bash, not plain sh
openinfo() {
	exec 3<> $1
	INFO=3
}

closeinfo() {
	exec 3>&-
}

# Clobbered by SWIFTWRAP_FAST
log() {
	echo "$@" >& "$INFO"
}

# Clobbered by SWIFTWRAP_FAST
infosection() {
	echo >& "$INFO"
	echo "_____________________________________________________________________________" >& "$INFO"
	echo >& "$INFO"
	echo "        $1" >& "$INFO"
	echo "_____________________________________________________________________________" >& "$INFO"
	echo >& "$INFO"
}

info() {
	infosection "uname -a"
	uname -a 2>&1 >& "$INFO"
	infosection "id"
	id 2>&1 >& "$INFO"
	infosection "env"
	env 2>&1 >& "$INFO"
	infosection "df"
	df 2>&1 >& "$INFO"
        if [ -e "/proc/cpuinfo" ]; then
		infosection "/proc/cpuinfo"
		cat /proc/cpuinfo 2>&1 >& "$INFO"
	fi
	if [ -e "/proc/meminfo" ]; then
		infosection "/proc/meminfo"
		cat /proc/meminfo 2>&1 >& "$INFO"
	fi
	infosection "command line"
	echo $COMMANDLINE 2>&1 >& "$INFO"
	if [ -f "$STDOUT" ] ; then
		infosection "stdout"
		cat $STDOUT >& "$INFO"
	fi
	if [ -f "$STDERR" ] ; then
		infosection "stderr"
		cat $STDERR >& "$INFO"
	fi
}

# Clobbered by SWIFTWRAP_FAST
logstate() {
	echo "Progress " `date +"%Y-%m-%d %H:%M:%S.%N%z"` " $@" >& "$INFO"
}

fail() {
	EC=$1
	shift

	log $@
	info
	echo "$@" >> wrapper.error
	exit $EC
}

checkError() {
	CHECK=$1
	shift
	if [ "$CHECK" != "0" ]; then
		fail $@
	fi
}

checkEmpty() {
	if [ "$1" == "" ]; then
		shift
		fail 254 $@
	fi
}

# Clobbered by SWIFTWRAP_FAST
checkMissing() {
	if [ "$MPI_RANK" == "0" ]; then
		MISSING=
		for O in $OUTF ; do
			if [ ! -f "$O" ]; then
				if [ "$MISSING" == "" ]; then
					MISSING=$O
				else
					MISSING="$MISSING, $O"
				fi
			fi
		done
		if [ "$MISSING" != "" ]; then
			fail 254 "The following output files were not created by the application: $MISSING"
		fi
	fi
}

checkparamfile() {
	log "checking for paramfile"
	if [ "$1" == "-p" ]; then
		if [ ! -f _paramfile ]; then
			fail 254 "-p specified but no '_paramfile' file found"
		fi
		PARAMFILE="_paramfile"
		log "paramfile is: $PARAMFILE"
	else
		log "no paramfile: using command line arguments"
	fi
}

getarg() {
	NAME=$1
	shift
	VALUE=""
	SHIFTCOUNT=0
	if [ "$PARAMFILE" == "" ] && [ "$1" == "$NAME" ]; then
		shift
		let "SHIFTCOUNT=$SHIFTCOUNT+1"
		while [ "${1:0:1}" != "-" ] && [ "$#" != "0" ]; do
			VALUE="$VALUE $1"
			shift
			let "SHIFTCOUNT=$SHIFTCOUNT+1"
		done
		VALUE="${VALUE:1}"
	elif [ "$PARAMFILE" != "" ] && grep -E "^$NAME " $PARAMFILE ; then
			VALUE=$(grep -E "^$NAME " $PARAMFILE | cut -d ' ' -f 2-)
	else
		fail 254 "Missing $NAME argument"
	fi
}

retry() {
	TIMES=$1
	WAIT=1
	shift
	
	while [ "$TIMES" -ge "0" ]; do
		"$@"
		EC=$?
		if [ "$EC" == "0" ]; then
			TIMES="-1"
		else
			sleep $WAIT
			let TIMES=TIMES-1
			let WAIT=WAIT*2
		fi
	done
}

MPISetVars() {
	if [ "$OMPI_COMM_WORLD_RANK" != "" ]; then
		export MPI_RANK="$OMPI_COMM_WORLD_RANK"
		export MPI="true"
		export MPI_ROOT_HOST=`echo $OMPI_MCA_orte_hnp_uri|awk 'BEGIN {FS=";"} {print gensub(/[a-z]+:\\/\\/(.*):[0-9]+/, "\\\\1", "g", $2)}'`
		export MPI_SIZE="$OMPI_COMM_WORLD_SIZE"
		export MPI_ROOT_PORT=22
	elif [ "$PMI_RANK" != "" ]; then
		export MPI_RANK="$PMI_RANK"
		export MPI="true"
		export MPI_SIZE="$PMI_SIZE"
		export MPI_ROOT_HOST="$PMI_ROOT_HOST"
		export MPI_ROOT_PORT="$PMI_ROOT_PORT"
	elif [ "$MPI_RANK" != "" ]; then
		export MPI="true"
	else
		export MPI="false"
		export MPI_RANK=0
	fi
}

MPIInitOutputAggregation() {
	if [ "$MPI" == "true" ]; then
		if [ "$MPI_ROOT_HOST" == "" ]; then
			log "MPI_ROOT_HOST is empty; cannot do output aggregation"
		else
			# If not visible from other ranks then this is running on a node-local fs
			if [ "$MPI_RANK" == "0" ]; then
				touch _mpi.fstest
			else
				STDOUT="$STDOUT._mpi.$MPI_RANK"
				STDERR="$STDERR._mpi.$MPI_RANK"
			fi
		fi
	fi
}

MPIWriteRankBanner() {
	echo "                               " >>$1
	echo "*******************************" >>$1
	echo "**     RANK: $2                " >>$1
	echo "*******************************" >>$1
}

MPIAggregateOutput() {
	if [ "$MPI" == "true" ]; then
		if [ "$MPI_ROOT_HOST" != "" ]; then
			if [ "$MPI_RANK" == "0" ]; then
				I=1
				# only initialize J here. If one output times out, the
				# others would already have taken about the same time to produce nothing
				J=1
				while [ "$I" -lt "$MPI_SIZE" ]; do
					log "Waiting for output from rank $I"
					while [ ! -f _mpi.done.$I ]; do
						sleep 1
						let J=J+1
						if [ "$J" -ge "60" ]; then
							log "Timed out waiting for output from rank $I"
							echo "Timeout" >> $STDOUT._mpi.$I
							echo "Timeout" >> $STDERR._mpi.$I
							touch _mpi.done.$I
						fi
					done
					log "Got output from rank $I"
					MPIWriteRankBanner $STDOUT $I
					MPIWriteRankBanner $STDERR $I
					cat $STDOUT._mpi.$I >> $STDOUT
					cat $STDERR._mpi.$I >> $STDERR
					rm _mpi.done.$I
					let I=I+1
				done
				rm _mpi.fstest
			else
				log "Staging outputs for rank $MPI_RANK"
				if [ ! -f _mpi.fstest ]; then
					# use a rank-specific known hosts file to avoid race conditions
					retry 3 scp -oUserKnownHostsFile=_known_hosts.$MPI_RANK -P $MPI_ROOT_PORT $STDOUT $STDERR $MPI_ROOT_HOST:$PWD/ >& "$INFO" 2>& "$INFO"
				fi
				FLAG="_mpi.done.$MPI_RANK"
				touch $FLAG
				if [ ! -f _mpi.fstest ]; then
					retry 3 scp -oUserKnownHostsFile=_known_hosts.$MPI_RANK -P $MPI_ROOT_PORT $FLAG $MPI_ROOT_HOST:$PWD/ >& "$INFO" 2>& "$INFO"
				fi
				log "Output staging done"
				# if we exit now, mpirun will terminate rank 0 before it does its job
				sleep 60
			fi
		fi
	fi
}

MPISetVars

COMMANDLINE=$@

# make the WFDIR absolute
PARAMFILE=

if [ "$MPI" == "true" ] && [ "$MPI_RANK" != "0" ]; then
	openinfo "wrapper.log.$MPI_RANK"
else
	openinfo "wrapper.log"
fi

log "Set MPI_ROOT_HOST to $MPI_ROOT_HOST from OMPI_MCA_orte_hnp_uri=$OMPI_MCA_orte_hnp_uri"
log "My rank: $MPI_RANK"

checkparamfile "$@"

# # SWIFTWRAP_FAST: Turn things off for speed
if [[ $SWIFTWRAP_FAST == "1" ]]; then
	shopt -s expand_aliases
	alias infosection=:
	alias logstate=:
	alias log=:
	alias checkMissing=:
fi

if [ "X$INFODIR" == "X" ]; then
	INFODIR="."
fi

logstate "LOG_START"
infosection "Wrapper (_swiftwrap.staging)"

getarg "-e" "$@"
EXEC=$VALUE
shift $SHIFTCOUNT

getarg "-out" "$@"
STDOUT=$VALUE
shift $SHIFTCOUNT

getarg "-err" "$@"
STDERR=$VALUE
shift $SHIFTCOUNT

getarg "-i" "$@"
STDIN=$VALUE
shift $SHIFTCOUNT

getarg "-d" "$@"
DIRS=$VALUE
shift $SHIFTCOUNT

getarg "-if" "$@"
INF=$VALUE
shift $SHIFTCOUNT

getarg "-of" "$@"
OUTF=$VALUE
shift $SHIFTCOUNT

getarg "-cf" "$@"
COLLECT=$VALUE
shift $SHIFTCOUNT

getarg "-cdmfile" "$@"
CDM_FILE=
if [ "X$VALUE" != "X" ]; then
	CDM_FILE=$VALUE
	log "CDM_FILE: $CDM_FILE"
fi
shift $SHIFTCOUNT

getarg "-status" "$@"
STATUSMODE=$VALUE
shift $SHIFTCOUNT

declare -a CMDARGS
if [ "$PARAMFILE" == "" ] && [ "$1" == "-a" ] ; then
	shift
	CMDARGS=("$@")
elif [ "$PARAMFILE" != "" ] ; then
	CMDARGS=()
	FIRST=1
	while read line ; do
		if [ "$FIRST" == "1" ] ; then
			CMDARGS=("$line")
			FIRST=0
		else
			CMDARGS=("${CMDARGS[@]}" "$line")
		fi
		log "count: ${#CMDARGS[@]}"
		log "line: $line"
		log "args: ${CMDARGS[@]}"
		log ""
	done < <(grep -E "^-a " $PARAMFILE | cut -d " " -f 2-)
else
	fail 254 "Missing arguments (-a option)"
fi

[[ $CDM_FILE != "" ]] && source cdm_lib.sh

PATH=$PATH:/bin:/usr/bin

if [ "$PATHPREFIX" != "" ]; then
	export PATH=$PATHPREFIX:$PATH
fi

if [ "$SWIFT_EXTRA_INFO" != "" ]; then
	log "EXTRAINFO=$($SWIFT_EXTRA_INFO)"
fi

if [ "X${EXEC:0:1}" != "X/" ] ; then
	export ORIGEXEC=$EXEC
	export EXEC=$(which $EXEC)
	if [ "X$EXEC" = "X" ] ; then
		fail 254 "Cannot find executable $ORIGEXEC on site system path"
	fi
fi

log "PWD=$PWD"
log "EXEC=$EXEC"
log "STDIN=$STDIN"
log "STDOUT=$STDOUT"
log "STDERR=$STDERR"
log "DIRS=$DIRS"
log "INF=$INF"
log "OUTF=$OUTF"
log "COLLECT=$COLLECT"
log "ARGS=${CMDARGS[@]}"
log "ARGC=${#CMDARGS[@]}"

IFS="|"

logstate "CREATE_INPUTDIR"
for D in $DIRS ; do
	if [ _$D != _ ]; then
		mkdir -p "$D" 2>&1 >& "$INFO"
	fi
	checkError $? 254 "Failed to create input directory $D"
	log "Created output directory: $D"
done

if [[ $CDM_FILE != "" ]] ; then
	for F in $INF ; do
		CDM_POLICY=$( cdm_lookup cdm.pl $CDM_FILE $F )
		log "CDM_POLICY: $F -> $CDM_POLICY"
		eval cdm_action $PWD "INPUT" $F $CDM_POLICY
	done
	for F in $OUTF ; do
		CDM_POLICY=$( cdm_lookup cdm.pl $CDM_FILE $F )
		log "CDM_POLICY: $F -> $CDM_POLICY"
		eval cdm_action $PWD "OUTPUT" $F $CDM_POLICY
	done
fi

logstate "EXECUTE"

if [ ! -f "$EXEC" ]; then
	fail 254 "The executable $EXEC does not exist"
fi
if [ ! -x "$EXEC" ]; then
	fail 254 "The executable $EXEC does not have the executable bit set"
fi

MPIInitOutputAggregation

if [ "$STDIN" == "" ]; then
	if [ "$SWIFT_GEN_SCRIPTS" != "" ]; then
		echo "#!/bin/bash" > run.sh
		echo "\"$EXEC\" \"${CMDARGS[@]}\" 1>\"$STDOUT\" 2>\"$STDERR\"" >> run.sh
		chmod +x run.sh
	fi
	"$EXEC" "${CMDARGS[@]}" 1>"$STDOUT" 2>"$STDERR"
else
	if [ "$SWIFT_GEN_SCRIPTS" != "" ]; then
		echo "#!/bin/bash" > run.sh
		echo "\"$EXEC\" \"${CMDARGS[@]}\" 1>\"$STDOUT\" 2>\"$STDERR\" <\"$STDIN\"" >> run.sh
		chmod +x run.sh
	fi
	"$EXEC" "${CMDARGS[@]}" 1>"$STDOUT" 2>"$STDERR" <"$STDIN"
fi
EC=$?
logstate "DONE EXITCODE=$EC"
MPIAggregateOutput
checkError $EC $EC "Application $EXEC failed with an exit code of $EC" <$STDERR

if [ "$COLLECT" != "" ] && [ "$MPI_RANK" == "0" ]; then
	logstate "COLLECT"
	log "Collect list is $COLLECT"
	exec 4<> "_collect"
	for O in "$COLLECT" ; do
		log "Collecting $O"
		ls -1 $O >&4
	done
	exec 4>&-
fi

logstate "EXECUTE_DONE"
log "Job ran successfully"

checkMissing

logstate "END"

closeinfo

# ensure we exit with a 0 after a successful execution
exit 0

# Local Variables:
# mode: sh
# sh-basic-offset: 4
# tab-width: 4
# indent-tabs-mode: 1
# End:
