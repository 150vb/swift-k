Sub openinfo(name) 
	Set info = fs.OpenTextFile(name, 8, True)
End Sub

Sub closeinfo
	info.close()
End Sub

Function getArgVal(cls, name)
	arr = getArgVals(cls, name)
	If UBound(arr) = 0 Then
		getArgVal = Empty
	Else
		getArgVal = RTrim(Join(arr))
	End If
End Function

Function getArgVals(cls, name)
	Dim val(255)
	sz = 0
	again = True
	Do While again
		done = (ai >= args.count)
		If Not(done) Then
			If Left(args(ai), 1) = "-" Then
				done = True
			End If
		End If
		If done Then
			If UBound(val) = 0 and cls = MandatoryArg Then
				fail "Expected " + name, 253
			End If
			again = False
		Else
			val(sz) = args(ai)
			ai = ai + 1
			sz = sz + 1
		End If
	Loop
	getArgVals = val
End Function

Function getRestArgs()
	 Dim val(255)
	 sz = 0
	 Do While ai < args.count
	 	If args(ai) = "-e" Then
	 		If args(ai + 1) = "-e" Then
	 			ai = ai + 1
	 		Else
	 			Exit Do
	 		End If
	 	End If
	 	val(sz) = args(ai)
	 	ai = ai + 1
	 	sz = sz + 1
	 Loop
	 getRestArgs = val
End Function

Function getOptArg() 
	getOptArg = getArgVal(OptionalArg, "")
End Function


Function expectArg(name)
	nope = (ai >= args.count)
	If Not(nope) Then
		If args(ai) <> "-" + name Then
			nope = True
		End If
	End If
	If nope Then
		fail "Expected argument " + name, 252
	Else
		ai = ai + 1
	End If
End Function

Function nextArgIs(name)
	If (ai >= args.count) Then
		nextArgIs = False
	Else
		If args(ai) = "-" + name Then
			nextArgIs = True
		Else
			nextArgIs = False
		End If
	End If
End Function

Sub logstate(args)
	'todo: timestamp and whatever else the "standard" format
	info.Write("Progress " + args)
	info.write(vbLf)
End Sub	

Sub log(args)
	'todo: timestamp and whatever else the "standard" format
	info.Write(args)
	info.write(vbLf)
End Sub

Function deleteIfExists(name)
	If fs.FileExists(name) Then
		fs.DeleteFile(name)
	End If
End Function

Sub mkdir(f)
	If Not f = "" Then
		If Not fs.FolderExists(f) Then
			mkdir fs.GetParentFolderName(f)
			fs.CreateFolder(f)
		End If
	End If
End Sub

Function prepareOne(v) 
	'Arguments with spaces must be quoted with a double quote
	'Literal double quotes must be escaped with a backslash
	'Literal backslashes must be escaped (with a backslash) if they appear before a double quote
	start = 1
	Do While start < Len(v) and Not start = 0
		start = InStr(start, v, "\")
		If start <> 0 Then
			v = Left(v, start) + "\" + Right(v, Len(v) - start)
			start = start + 2
		End If
	Loop
	start = 1
	Do While start < Len(v) and Not start = 0
		start = InStr(start, v, """")
		If start <> 0 Then
			v = Left(v, start - 1) + "\" + Right(v, Len(v) - start + 1)
			start = start + 2
		End If
	Loop
	If Not InStr(v, " ") = 0 Then
		v = """" + v + """"
	End If
	prepareOne = v
End Function

Function prepareArgs(args)
	For i = 0 To UBound(args)
		args(i) = prepareOne(args(i))
	Next
	prepareArgs = join(args)
End Function

Sub checkExecutable(EXEC) 
	If LCase(fs.GetAbsolutePathName(EXEC)) <> LCase(EXEC) Then
		'relative name
		If Not fs.FileExists(EXEC) Then
			found = False
			'search in path
			dirs = split(env("PATH"), ";")
			For Each d in dirs
				If fs.FileExists(d + "\" + EXEC) Then
					found = True
					Exit For
				End If
			Next
			If Not Found Then
				fail "The executable (" + EXEC + ") was not found in the current directory or search path", 252
			End If
		End If
	Else
		If Not fs.FileExists(EXEC) Then
			fail "Executable (" + EXEC + ") does not exist", 251
		End If
	End If
End Sub