#!/bin/bash
# this script must be invoked inside of bash, not plain sh
# note that this script modifies $IFS

#include _swiftwrap.lib

localPath() {
    # remove protocol://
    PATH="${1#*!}"
	log "localPath($1) -> $PATH"
	echo $PATH
}

remotePath() {
	PATH="${1%!*}"
	log "remotePath($1) -> $PATH"
	echo $PATH
}

# SEE NOTE BELOW FOR THESE VARS:

SWIFT_GLOBUS_USER=$USER
SWIFT_SITE_SCRATCH_ENDPOINT="ucrcc#midway"

stagein() {
	SRC=`remotePath $1`
	DST=$2
	case $SRC in
		*://*)
			;;
		*)
		SRC=$URLPREFIX/$SRC
		;;
	esac
	
	log "Staging in $SRC to $DST"
	
	case $SRC in
		file://*)
			SRC=${SRC#file://}
			log "Copying $SRC to $DST"
			if [ ! -f $SRC ]; then
				fail 254 "Cannot stage in $SRC. File not found."
			fi
            ln -s $SRC $DST 2>&1 >& "$INFO"
			;;
		stage://*)
			SRC=${SRC#stage://}
			log "Copying $SRC to $DST"
			if [ ! -f $SRC ]; then
				fail 254 "Cannot stage in $SRC. File not found."
			fi
            dd if=$SRC of=$DST bs=10M 2>&1 >& "$INFO"
			;;
        direct://*)
            SRC=${SRC#direct://}
			log "Linking $SRC to $DST"
			if [ ! -f $SRC ]; then
				fail 245 "Cannot stage in $SRC. File not found."
			fi
            ln -s $SRC $DST 2>&1 >& "$INFO"
            ;;
        globus://*)

# THIS ASSUMES:
# - user has created a proxy that is recognixed by their globus.org account, in $HOME/.globus/.glob
#   (as opposed to /tmp, because it needs to be seen by the worker nodes)
# - worker nodes share filesystem with swift node
# - globus userid is same as current userid
# - scratch and workdirectory are on shared storage and accessible to globus.org transfer service
# - the endpoint for the site is set in $SWIFT_SITE_SCRATCH_ENDPOINT
# - the gsissh command is in the PATH, and functional

        	SRC="${SRC#globus://}"
            EP="${SRC/'/'*/}"
            FN="/${SRC#*'/'}"
        	log "Fetching with Globus: EP=$EP FILE=$FN"
            log "Doing: $GLOBUSCP $EP:$FN $SWIFT_SITE_SCRATCH_ENDPOINT:$DST"
            unset X509_CERT_DIR
            X509_USER_PROXY=$HOME/.globus/.glob gsissh $SWIFT_GLOBUS_USER@cli.globusonline.org scp "$EP:$FN" "$SWIFT_SITE_SCRATCH_ENDPOINT:$DST" >& "$INFO"
			;;
        globustest://*) # clone of http case, for testing (was globus:)
        	ASRC="http://${SRC#globus://}"
        	log "Fetching $SRC ($ASRC) using Globus"
			wget $ASRC -O $DST 2>&1 >& "$INFO"
			;;
		http://*)
			log "Fetching $SRC using wget"
			wget $SRC -O $DST 2>&1 >& "$INFO"
			;;
		*://*)
			fail 254 "Cannot handle protocol ${SRC%%://*}"
			;;
		*)
			fail 254 "Invalid URL: $SRC"
			;;
	esac
}

stageout() {
	SRC=$1
	DST=`remotePath $2`
	
	case $DST in
		*://*)
			;;
		*)
			DST=$URLPREFIX/$DST
	esac
	
	log "Staging out $SRC to $DST"
	
	local DIR
	
	case $DST in
		file://*)
			DST=${DST#file://}
			DIR=`dirname $DST`
			mkdir -p $DIR
			log "Copying $SRC to $DST"
			dd if=$SRC of=$DST bs=16M 2>&1 >& "$INFO"
			;;
        globus://*)
        	DST="${DST#globus://}"
            EP="${DST/'/'*/}"
            FN="/${DST#*'/'}"
        	log "Staging with Globus: EP=$EP FILE=$FN"
            log "Doing: scp $SCRATCHEP:$SRC" $EP:$FN 
            unset X509_CERT_DIR
            X509_USER_PROXY=$HOME/.globus/.glob gsissh $SWIFT_GLOBUS_USER@cli.globusonline.org scp "$SWIFT_SITE_SCRATCH_ENDPOINT:$SRC" "$EP:$FN"  >& "$INFO"
			;;
		*://*)
			fail 254 "Cannot handle protocol ${DST%%://*}"
			;;
		*)
			fail 254 "Invalid URL: $DST"
			;;
	esac
}


fail() {
	EC=$1
	shift
	
	if [ "X$DIR" != "X" ]; then
		echo $@ >"$DIR/_wrapper.error"
		stageout "$DIR/_wrapper.error" "$JOBDIR/_wrapper.error"
	else
		echo $@
	fi
		
	log $@
	info
	if [ "$STATUSMODE" = "files" ]; then
		exit 0
	else
		exit $EC
	fi
}

checkparamfile() {
	log "checking for paramfile"
	if [ "$1" == "-p" ]; then
		PARAMFILE="$SCRATCH/_paramfile"
		stagein "$URLPREFIX/$2" "$PARAMFILE"
	else
		log "No paramfile specified"
	fi
}

MPISetVars

COMMANDLINE=$@
PARAMFILE=

openinfo "wrapper.log"
ID=$1
checkEmpty "$ID" "Missing job ID"

shift

getarg "-urlprefix" "$@"
URLPREFIX=$VALUE
shift $SHIFTCOUNT

getarg "-jobdir" "$@"
JOBDIR=$VALUE
shift $SHIFTCOUNT

getarg "-scratch" "$@"
SCRATCH=$VALUE/$ID
shift $SHIFTCOUNT

checkparamfile "$@"
loadParamfile
if [ "$PARAMARGS" != "" ]; then
	set -- "$PARAMARGS"
fi

INFODIR=$SCRATCH

checkEmpty "$JOBDIR" "Missing job directory prefix"
mkdir -p $INFODIR
log "Info dir is $INFODIR"
closeinfo

if [ "$MPI_RANK" != "0" ]; then
	openinfo "$INFODIR/_wrapper.log.$MPI_RANK"
else
	openinfo "$INFODIR/_wrapper.log"
fi

logstate "LOG_START"
infosection "Wrapper (_swiftwrap.wrapperstaging)"

getarg "-d" "$@"
DIRS=$VALUE
shift $SHIFTCOUNT

getarg "-if" "$@"
INF=$VALUE
shift $SHIFTCOUNT

getarg "-of" "$@"
OUTF=$VALUE
shift $SHIFTCOUNT

getarg "-cf" "$@"
COLLECT=$VALUE
if [ "X$VALUE" != "X" ]; then
	fail "Output file collection not supported (yet) with wrapper staging"
fi
shift $SHIFTCOUNT

getarg "-wt" "$@"
WRAPPERLOG_ALWAYS_TRANSFER=$VALUE
shift $SHIFTCOUNT

getarg "-sk" "$@"
SITEDIR_KEEP=$VALUE
shift $SHIFTCOUNT

getarg "-cdmfile" "$@"
CDM_FILE=
if [ "X$VALUE" != "X" ]; then
	CDM_FILE=shared/$VALUE
fi
shift $SHIFTCOUNT

getarg "-status" "$@"
STATUSMODE=$VALUE
shift $SHIFTCOUNT

if [ "X$CDM_FILE" != "X" ]; then
	# TODO
	logstate "SOURCE_CDM_LIB $WFDIR/shared/cdm_lib.sh"
	source $WFDIR/shared/cdm_lib.sh
	checkError $? 254 "Could not source: $WFDIR/shared/cdm_lib.sh"
fi

if [ "X$SCRATCH" == "X" ]; then
	error "Wrapper staging requires a scratch directory to be specified"
fi

DIR="$SCRATCH/$JOBID"

PATH=$PATH:/bin:/usr/bin

if [ "$PATHPREFIX" != "" ]; then
	export PATH=$PATHPREFIX:$PATH
fi

if [ "$SWIFT_EXTRA_INFO" != "" ]; then
	log "EXTRAINFO=$($SWIFT_EXTRA_INFO)"
fi

if [ "$1" != "-e" ]; then
	fail 254 "Missing -e argument" 
fi

log "PID=$$"
log "HOST=$HOST"
log "PWD=$PWD"
log "DIR=$DIR"
log "DIRS=$DIRS"
log "INF=$INF"
log "OUTF=$OUTF"
log "WRAPPERLOG_ALWAYS_TRANSFER=$WRAPPER_LOG_ALWAYS_TRANSFER"
log "SITEDIR_KEEP=$SITEDIR_KEEP"
log "CDM_FILE=$CDM_FILE"

IFS="|"

logstate "CREATE_JOBDIR"
mkdir -p $DIR
checkError $? 254 "Failed to create job directory $DIR"
log "Created job directory: $DIR"

createInputDirs "$DIR/"

if [ "$MPI_RANK" == "0" ]; then
	
	logstate "LINK_INPUTS"
	for L in $INF ; do
	    CDM_POLICY="DEFAULT"
		if [[ $CDM_FILE != "" ]]; then
			CDM_POLICY=$( cdm_lookup shared/cdm.pl $CDM_FILE $L )
		fi
		if [[ $CDM_POLICY != "DEFAULT" && $CDM_POLICY != "EXTERNAL"* ]]; then
			log "CDM_POLICY: $L -> $CDM_POLICY"
			eval cdm_action $DIR "INPUT" $L $CDM_POLICY
			continue
		fi
	
        stagein $L "$DIR/`localPath $L`"
	done
	
	if [[ $CDM_FILE != "" ]]; then
	    logstate "LINK_CDM_OUTPUTS"
	    SKIPPED_OUTPUT=()
		GATHER_OUTPUT=()
		for L in $OUTF ; do
			CDM_POLICY=$( cdm_lookup shared/cdm.pl $CDM_FILE $L )
			log "CDM_POLICY: $L -> $CDM_POLICY"
			if [[ $CDM_POLICY != "DEFAULT" &&
				  $CDM_POLICY != "BROADCAST"* ]]; then
	    	    eval cdm_action $DIR "OUTPUT" $L $CDM_POLICY
				SKIPPED_OUTPUT=( $SKIPPED_OUTPUT $L )
			fi
			if [ $CDM_POLICY == "GATHER" ]; then
				GATHER_OUTPUT=( $GATHER_OUTPUT $L )
			elif [ $CDM_POLICY == "LOCAL" ]; then
				CDM_LOCAL_OUTPUT=( $CDM_LOCAL_OUTPUT $L )
			fi
		done
	fi

fi # PMI_RANK==0

debug "Moving to jobdir: $DIR"
cd $DIR
if [ $? != 0 ]; then
	log "PWD: $PWD"
	log $( find . )
	fail $? 254 "Could not cd to: $DIR"
fi

handleSetupScript
initTimingTools

SEQ=1
while [ "$1" == "-e" ]; do
	getarg "-e" "$@"
	EXEC=$VALUE
	shift $SHIFTCOUNT
	
	getarg "-out" "$@"
	STDOUT=$VALUE
	shift $SHIFTCOUNT
	
	getarg "-err" "$@"
	STDERR=$VALUE
	shift $SHIFTCOUNT
	
	getarg "-i" "$@"
	STDIN=$VALUE
	shift $SHIFTCOUNT
	
	getCmdArgs "$@"
	shift $SHIFTCOUNT
	
	log "EXEC=$EXEC"
	log "STDIN=$STDIN"
	log "STDOUT=$STDOUT"
	log "STDERR=$STDERR"
	log "ARGS=${CMDARGS[@]}"
	log "ARGC=${#CMDARGS[@]}"
	
	resolveExecutable
	
	initTimingTools
	
	logstate "EXECUTE"

	MPIInitOutputAggregation
	
	actualExec
	
	MPIAggregateOutput
	
	if [ "$MPI_RANK" == "0" ]; then
		linkOutput $EC _stdout_$SEQ.txt _stdout.txt "$STDOUT"
		linkOutput $EC _stderr_$SEQ.txt _stderr.txt "$STDERR"
	fi
	
	if [ -s _stderr_$SEQ.txt ]; then
		checkError $EC $EC "Application $EXEC failed with an exit code of $EC"$'\n'$(<_stderr_$SEQ.txt)
	else
		checkError $EC $EC "Application $EXEC failed with an exit code of $EC"
	fi
	let "SEQ=$SEQ+1"
done

# called by collectOutput for each set of files collected 
collectCB() {
	# TODO
}

logstate "EXECUTE_DONE"
if [ "$MPI_RANK" == "0" ]; then
	collectOutput
fi

if [ "$MPI_RANK" == "0" ]; then

	checkMissing "$DIR/"
	
	logstate "MOVING_OUTPUTS $OUTF"
	for O in $OUTF ; do
		if ! contains SKIPPED_OUTPUT $O ; then
			stageout "$DIR/`localPath $O`" "$O" 
		fi
	done
	
	cdm_local_output $CDM_LOCAL_OUTPUT
	cdm_gather $GATHER_OUTPUT
	
	if [ "$STATUSMODE" = "files" ]; then
		logstate "TOUCH_SUCCESS $DIR `pwd`"
		touch _swift.success
		stageout "$DIR/_swift.success" "$JOBDIR/_swift.success"  
	fi
	
	log "Moving back to workflow directory $WFDIR"
	cd $WFDIR
	checkError $? 254 "Could not cd to workflow directory: $WFDIR"
	
	if [ "$WRAPPERLOG_ALWAYS_TRANSFER" == "true" ]; then
		stageout "$INFOFILE" "$JOBDIR/_wrapper.log"
	fi
	if [ "$SITEDIR_KEEP" != "true" ]; then
		logstate "RM_JOBDIR"
		rm -rf "$DIR" 2>&1 >& "$INFO"
		checkError $? 254 "Failed to remove job directory $DIR"
	fi
else
	# Allow rank 0 to write output
	sleep 1
fi # MPI_RANK==0

logstate "END"

closeinfo

# ensure we exit with a 0 after a successful execution
exit 0
