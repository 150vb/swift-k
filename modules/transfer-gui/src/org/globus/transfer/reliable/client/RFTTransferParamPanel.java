/*
 * RFTTransferParam.java
 *
 * 
 */

package org.globus.transfer.reliable.client;

import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

import org.globus.wsrf.impl.security.authorization.HostAuthorization;
import org.globus.wsrf.impl.security.authorization.SelfAuthorization;
import org.globus.wsrf.security.Constants;

/**
 *
 * @author  vic
 */
public class RFTTransferParamPanel extends javax.swing.JPanel {
    private Map authTypeMap = new HashMap();
    private Map authzTypeMap = new HashMap();
    /** Creates new form RFTTransferParam */
    public RFTTransferParamPanel() {
    	authTypeMap.put("GSI_TRANSPORT", Constants.GSI_TRANSPORT);
    	authTypeMap.put("GSI_SEC_CONV", Constants.GSI_SEC_CONV);
    	authTypeMap.put("GSI_SEC_MSG", Constants.GSI_SEC_MSG);
    	
    	authzTypeMap.put("HOST", HostAuthorization.getInstance());
    	authzTypeMap.put("SELF", SelfAuthorization.getInstance());
        initComponents();
    }

    public String getFrom() {
        return fromField.getText();
    }

    public String getServerHost() {
        return serverHostField.getText();
    }

    public String getServerPort() {
        return serverPortField.getText();
    }

    public String getTo() {
        return toField.getText();
    }
    
    public void setServerHost(String t) {
        serverHostField.setText(t);
    }

    public void setServerPort(String t) {
        serverPortField.setText(t);
    }

    public int getConcurrent() {
        String value = concurrencyField.getText();
        int con = 1;
        if (null != value) {
            try {
                con = Integer.valueOf(value);
            } catch (NumberFormatException e) {
                con = 1;
            }            
        }
        
        return con;
    }
    
    public void setConcurrent(String c) {
    	concurrencyField.setText(c);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        serverHostField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        serverPortField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fromField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        toField = new javax.swing.JTextField();
        concurrencyLabel = new javax.swing.JLabel();
        concurrencyField = new javax.swing.JTextField();
        rftHelpButton = new javax.swing.JButton("RFT?");
        
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setName("jList1"); // NOI18N
        jScrollPane1.setViewportView(jList1);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.globus.transfer.reliable.client.GridFTPGUIApp.class).getContext().getResourceMap(RFTTransferParamPanel.class);
        setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("Form.border.title"))); // NOI18N
        setName("Form"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N        
        
        concurrencyLabel.setText(resourceMap.getString("concurrencyLabel.text"));
        concurrencyLabel.setName("concurrencyLabel");
        
        concurrencyField.setText(resourceMap.getString("concurrencyField.text")); // NOI18N
        concurrencyField.setName("concurrencyField"); // NOI18N
        
        serverHostField.setText(resourceMap.getString("serverHostField.text")); // NOI18N
        serverHostField.setName("serverHostField"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        serverPortField.setText(resourceMap.getString("serverPortField.text")); // NOI18N
        serverPortField.setName("serverPortField"); // NOI18N

        

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        fromField.setText(resourceMap.getString("fromField.text")); // NOI18N
        fromField.setName("fromField"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        toField.setText(resourceMap.getString("toField.text")); // NOI18N
        toField.setName("toField"); // NOI18N

        enable_rft = new javax.swing.JLabel();
        enable_rft.setText("Enable RFT");
        enable_rft_checkbox = new javax.swing.JCheckBox();
        enable_rft_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enable_rft_checkboxActionPerformed(evt);
            }
        });
        
        rftHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rftHelpButtonActionPerformed(evt);
            }
        });
        Properties prop = new Properties();
        File propFile = new File("rft.properties");
        if (propFile.exists()) {
        	try {    		
    			prop.load(new FileInputStream(propFile));
    			setEnableRFT((new Boolean((String)prop.get("rft_enabled"))).booleanValue());
    			setServerHost((String)prop.getProperty("host"));
    			setServerPort((String)prop.getProperty("port"));
    			setConcurrent((String)prop.getProperty("concurrent"));
    		} catch (Exception e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		} 
        }
        
        if (enable_rft_checkbox.isSelected()) {
        	System.out.println("checkbox selected");
            jLabel1.setEnabled(true);
            serverHostField.setEditable(true);
            jLabel2.setEnabled(true);
            serverPortField.setEditable(true);
            concurrencyLabel.setEnabled(true);
            concurrencyField.setEditable(true);            
        } else {
            jLabel1.setEnabled(false);
            serverHostField.setEditable(false);
            jLabel2.setEnabled(false);
            serverPortField.setEditable(false);
            concurrencyLabel.setEnabled(false);
            concurrencyField.setEditable(false);            
        }        
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout); 
        
            layout.setHorizontalGroup(
            		layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()                		
                        .addContainerGap()
                        .add(64, 64, 64)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(enable_rft)
                                    .add(jLabel1)
                                    .add(jLabel2)
                                    .add(concurrencyLabel)                                    
                                    )
                                   .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                	.add(rftHelpButton)
                                    .add(50, 50, 50)
                                    .add(50, 50, 50)
                                    .add(50, 50, 50)
                                    .add(50, 50, 50)                                    
                                    )                                 
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)                               	
                                    .add(enable_rft_checkbox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                                    .add(serverHostField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                                    .add(serverPortField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, Short.MAX_VALUE)
                                    .add(concurrencyField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, Short.MAX_VALUE)                                  
                                    
                                    )                           
                               
                            )

                                ))
                );

        layout.setVerticalGroup(
        		layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                		//.add(26, 26, 26)
                	.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    	//.add(100, 100, 100)
                    .add(rftHelpButton))
                    .add(11, 11, 11)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(enable_rft)
                        .add(10, 10, 10)
                        .add(enable_rft_checkbox))
                    .add(11, 11, 11)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel1)
                        .add(10, 10, 10)
                        .add(serverHostField, 1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel2)
                        .add(10, 10, 10)
                        .add(serverPortField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(concurrencyLabel)
                        .add(10, 10, 10)
                        .add(concurrencyField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        
                    .addContainerGap(18, Short.MAX_VALUE))
            );

    }// </editor-fold>//GEN-END:initComponents
    
    public boolean isRFTEnabled() {
    	return enable_rft_checkbox.isSelected();
    }
    
    public void setEnableRFT(boolean enabled) {
    	enable_rft_checkbox.setSelected(enabled);
    }
    
    private void loadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser(".");
        fileChooser.addChoosableFileFilter(new MyFilter());
        int status = fileChooser.showDialog(this, "load");
        if (status == JFileChooser.APPROVE_OPTION) {
            
        }
    }
    

    
    private void enable_rft_checkboxActionPerformed(java.awt.event.ActionEvent evt) {
        if (enable_rft_checkbox.isSelected()) {
                	       jLabel1.setEnabled(true);
                           jLabel2.setEnabled(true);
                	       serverHostField.setEditable(true);
                           serverPortField.setEditable(true);
                           concurrencyLabel.setEnabled(true);
                           concurrencyField.setEditable(true);                           
                   } else {
                	   jLabel1.setEnabled(false);
                       jLabel2.setEnabled(false);
                	   serverHostField.setEditable(false);
                       serverPortField.setEditable(false);
                       concurrencyField.setEditable(false);
                       concurrencyLabel.setEnabled(false);                       
                   }
    }
    
    private void rftHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	String msg = "RFT is a GridFTP client that handles failures more reliably. It is a \n" + 
    		         "Web Services Resource Framework (WSRF) compliant web service \n" + 
    		         "that provides job scheduler-like functionality for data movement.\n" + 
    		         "It can recover from source and/or destination server crashes during\n"+ 
    		         "a transfer, network failures, RFT service failures, file system failures\n" +
    		         "etc. More information on RFT is available at\n" + 
    		         "http://www.globus.org/toolkit/docs/4.2/4.2.0/data/rft/index.html";
    	JOptionPane.showMessageDialog(null, msg, "What is RFT", JOptionPane.INFORMATION_MESSAGE);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fromField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField serverHostField;
    private javax.swing.JTextField serverPortField;
    private javax.swing.JTextField toField;
    private javax.swing.JLabel enable_rft;
    private javax.swing.JCheckBox enable_rft_checkbox;
    private javax.swing.JLabel concurrencyLabel;
    private javax.swing.JTextField concurrencyField;
    private javax.swing.JButton rftHelpButton;
    // End of variables declaration//GEN-END:variables
    
    public class MyFilter extends FileFilter {

        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }

            String extension = getExtension(f);
            if (extension != null) {
                if (extension.equals("xfr")) {
                    return true;
                } else {
                    return false;
                }
            }

            return false;
        }

        public String getDescription() {
            return ".xfr files";
        }

        public String getExtension(File f) {
            String ext = null;
            String s = f.getName();
            int i = s.lastIndexOf('.');

            if (i > 0 && i < s.length() - 1) {
                ext = s.substring(i + 1).toLowerCase();
            }
            return ext;
        }
    }
    
}
