group XDTM;

program(namespaces,targetNS,functions,types,statements) ::= <<
<program xmlns=$defaultNS()$
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"$if(!namespaces)$>
     $else$

     $namespaces;separator="\n"$>$endif$
  $if(types)$
  <types>
    <xs:schema targetNamespace=$defaultNS(targetNS)$>
     $types;separator="\n"$
    </xs:schema>
  </types>
  $endif$
  $functions;separator="\n"$
  $statements;separator="\n"$
</program>
>>

defaultNS(ns) ::= <<
$if(ns)$"$ns$"$else$
"http://ci.uchicago.edu/swift/2007/07/swiftscript"
$endif$
>>

nsDef(prefix,uri) ::= <<
$if(prefix)$xmlns:$prefix$="$uri$"$else$targetNamespace="$uri$"$endif$
>>

typeDef(name,type,members) ::= <<
$if(type)$
$if(type.name)$
<xs:element name="$name$" type="$type$"/>
$else$
<xs:simpleType name="$name$">
  <xs:restriction base="xs:$type$"/>
</xs:simpleType>
$endif$
$else$
$if(!members)$
<xs:simpleType name="$name$">
  <xs:restriction base="xs:string"/>
</xs:simpleType>
$else$
<xs:complexType name="$name$">
  <xs:sequence>
    $members;separator="\n"$
  </xs:sequence>
</xs:complexType>
$endif$
$endif$
>>

memberdefinition(type,name, isArray) ::= <<
$if(isArray)$
<xs:sequence minOccurs="0" maxOccurs="unbounded">
  <xs:element name="$name$" type="$if(type.name)$$type$$else$xs:$type$$endif$"/>
</xs:sequence>
$else$
  <xs:element name="$name$" type="$if(type.name)$$type$$else$xs:$type$$endif$"/>
$endif$
>>

variable(type,name, isArray, value) ::= <<
<variable name="$name$" type="$type$"$if(isArray)$ isArray="true"$endif$$if(!value)$ xsi:nil="true"/>$else$>$value$</variable>
$endif$
>>

dataset(name,type,mapping, lfn, isArray) ::= <<
<dataset name="$name$" type="$type$"$if(isArray)$ isArray="true"$endif$>
$if(lfn)$
  <file name="$lfn$"/>

$else$
  $mapping$

$endif$
</dataset>
>>

mapping(descriptor,params) ::= <<
<mapping descriptor="$descriptor$"$if(params)$>
  $params;separator="\n"$
</mapping>
$else$/>$endif$
>>

mapParam(name,value) ::= <<
<param name="$name$">$value$</param>
>>

arrayInit(elements,range) ::= <<
$if(range)$

  $range$

$else$

  <array>
    $elements$
  </array>

$endif$
>>

range(from, to, step) ::= <<
<range>
  $from$
  $to$
  $if(step)$$step$$endif$
</range>
>>

function(name,outputs,inputs,statements,config) ::= <<
<procedure name="$name$">
  $outputs;separator="\n"$
  $inputs;separator="\n"$
  $statements;separator="\n"$
  $config$
</procedure>
>>

call(func,outputs,inputs) ::= <<
<call proc="$func$">
  $outputs;separator="\n"$
  $inputs;separator="\n"$
</call>
>>

vardecl() ::= <<
$if (it.type)$
<variable name="$it.name$" type="$it.type$"/>$\n$
$endif$
>>

returnParam(type,name,bind) ::= <<
<output$if (bind)$ bind="$bind$"$endif$>$name$</output>
>>

actualParam(value,bind) ::= <<
<input$if (bind)$ bind="$bind$"$endif$>$value$</input>
>>

parameter(type,name,outlink,isArray,defaultv) ::= <<

$if(outlink)$
  <output 
$else$
  <input 
$endif$

name="$name$" type="$type$"$if(isArray)$ isArray="true"$endif$

$if(defaultv)$> 
$defaultv$

$if(outlink)$
  </output>
$else$
  </input>
$endif$

$else$
 xsi:nil="true" />
$endif$
>>

app(exec,arguments,stdio) ::= <<
<binding>
  <application>
    <executable>$exec$</executable>
$if(stdio)$
    $stdio;separator="\n"$
$endif$
$if(arguments)$
    $arguments$
$endif$
  </application>
</binding>
>>

functionInvocation(name,args) ::= <<
<function name="$name$">
$if(args)$
  $args$
$endif$
</function>
>>

mappingExpr(expr) ::= "$expr$"

stdin(content) ::= <<
<stdin>$content$</stdin>
>>

stdout(content) ::= <<
<stdout>$content$</stdout>
>>

stderr(content) ::= <<
<stderr>$content$</stderr>
>>

statementList(statements) ::= <<
  $statements;separator="\n"$
>>

if(cond,body,els) ::= <<
<if>
  $cond$
  <then>
  $body$
  </then>
$if(els)$
  <else>
  $els$
  </else>
$endif$
</if>
>>

foreach(variables,var,in,index,body) ::= <<
$if(variables)$
$variables$

$endif$
<foreach var="$var$" $if(index)$ indexVar="$index$"$endif$>
<in>$in$</in>
<body>$body$</body>
</foreach>
>>

switch(cond,cases) ::= <<
<switch>
  $cond$
  $cases;separator="\n"$
</switch>
>>

case(value, statements) ::= <<
$if(value)$
<case>
  $value$
  <statements>
  $statements;separator="\n"$
  </statements>
</case>
$else$
<default>
  $statements;separator="\n"$
</default>
$endif$
>>

while(cond,body) ::= <<
<while test="$cond$">
  $body$
</while>
>>

repeat(cond,body) ::= <<
<repeat until="$cond$">
  $body$
</repeat>
>>

continue() ::= <<
<continue/>
>>

assign(lhs,rhs) ::= <<
<assign>
 $lhs$
 $rhs$
</assign>
>>

arraySubscript(array, subscript) ::= <<
<arraySubscript>
 $array$
 $subscript$
</arraySubscript>
>>

memberAccess(structure,name) ::= <<
<structureMember>
  $structure$
  <memberName>$name$</memberName>
</structureMember>
>>

unaryNegation(exp) ::= <<
<unaryNegation>
  $exp$
</unaryNegation>
>>

cond(op,left,right) ::= <<
<cond op="$op$">
  $left$
  $right$
</cond>
>>

and(left,right) ::= "<and><left>$left$</left><right>$right$</right></and>"

or(left, right) ::= "<or><left>$left$</left><right>$right$</right></or>"

not(exp) ::= "<not>$exp$</not>"

arith(op, left,right) ::= <<
<arith op="$op$">
  $left$
  $right$
</arith>
>>

paren(exp) ::= "$exp$"

type_int() ::= "int"
type_string() ::= "string"
type_float() ::= "float"
type_bool() ::= "bool"

type_user_object(name) ::= "$name$"

variableReference(name) ::= "<variableReference>$name$</variableReference>"

iConst(value) ::= "<integerConstant>$value$</integerConstant>"

fConst(value) ::= "<floatConstant>$value$</floatConstant>"

bConst(value) ::= "<booleanConstant>$value$</booleanConstant>"

sConst(value) ::= "<stringConstant>$value$</stringConstant>"

blank() ::= ""

