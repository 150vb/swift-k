// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: fullnames 
// Source File Name:   QueuePanel.java

package org.globus.ogce.beans.filetransfer.gui.monitor;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.apache.log4j.Logger;

// Referenced classes of package org.globus.ogce.beans.filetransfer.gui.monitor:
//            QueueTableModel

public class QueuePanel extends javax.swing.JPanel
    implements java.awt.event.MouseListener
{

    public QueuePanel()
    {
        queueTable = null;
        jpopup = null;
        completeTable = null;
        setLayout(new BorderLayout());
        setSize(200, 300);
        setVisible(true);
        queueTable = new JTable();
        javax.swing.JScrollPane jobsScrollPane = new JScrollPane(queueTable);
        add(jobsScrollPane, "Center");
        javax.swing.border.Border jobsBorder = javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(1), "Transfer Queue");
        setBorder(jobsBorder);
        queueTable.addMouseListener(this);
        jpopup = new JPopupMenu();
        completeTable = queueTable;
    }

    public void createHeader(java.lang.String cols[])
    {
        org.globus.ogce.beans.filetransfer.gui.monitor.QueueTableModel tableModel = new QueueTableModel();
        java.util.Vector columnIDs = new Vector();
        for(int i = 0; i < cols.length; i++)
            columnIDs.add(cols[i]);

        tableModel.setColumnIdentifiers(columnIDs);
        queueTable.setModel(tableModel);
        queueTable.getTableHeader().setReorderingAllowed(false);
    }

    public void addTransfer(java.lang.String cols[])
    {
        javax.swing.table.DefaultTableModel tableModel = getModel();
        int row = tableModel.getRowCount();
        java.util.Vector rowData = new Vector();
        for(int i = 0; i < cols.length; i++)
            rowData.add(cols[i]);

        tableModel.insertRow(row, rowData);
    }

    public void updateTransfer(java.lang.String cols[])
    {
        javax.swing.table.DefaultTableModel tableModel = getModel();
        if(tableModel.getRowCount() > 0)
        {
            int selectedRow = getRowIndex(cols[0]);
            for(int i = 0; i < cols.length; i++)
                if(cols[i] != null)
                    tableModel.setValueAt(cols[i], selectedRow, i);

        }
    }

    public void setFocus(java.lang.String jobID)
    {
        queueTable.repaint();
        int row = getRowIndex(jobID);
        javax.swing.table.DefaultTableModel tableModel = getModel();
        int noRows = tableModel.getRowCount();
        if(noRows > 1)
        {
            if(row < noRows - 1)
                row++;
            queueTable.scrollRectToVisible(queueTable.getCellRect(row, 0, true));
        }
    }

    public void deleteTransfer(java.lang.String jobid)
    {
        javax.swing.table.DefaultTableModel tableModel = getModel();
        int selectedRow = getRowIndex(jobid, 1);
        tableModel.removeRow(selectedRow);
    }

    public javax.swing.JPopupMenu getPopupMenu()
    {
        return jpopup;
    }

    public int getRowIndex(java.lang.String jobid)
    {
        javax.swing.table.DefaultTableModel tableModel = getModel();
        int noRows = tableModel.getRowCount();
        int selectedRow = 0;
        for(int j = 0; j < noRows; j++)
        {
            if(!jobid.equals(getColumnValue(j, 0)))
                continue;
            selectedRow = j;
            break;
        }

        return selectedRow;
    }

    public int getRowIndex(java.lang.String value, int col)
    {
        javax.swing.table.DefaultTableModel tableModel = getModel();
        int noRows = tableModel.getRowCount();
        int selectedRow = 0;
        for(int j = 0; j < noRows; j++)
        {
            if(!value.equals(getColumnValue(j, col)))
                continue;
            selectedRow = j;
            break;
        }

        return selectedRow;
    }

    public void clear()
    {
        javax.swing.table.DefaultTableModel tableModel = getModel();
        int rowCount = tableModel.getRowCount();
        if(rowCount > 0)
        {
            for(int row = 0; row < rowCount; row++)
                tableModel.removeRow(0);

        }
    }

    public int tableSize()
    {
        javax.swing.table.DefaultTableModel tableModel = getModel();
        int rowCount = tableModel.getRowCount();
        return rowCount;
    }

    public javax.swing.table.DefaultTableModel getModel()
    {
        return (javax.swing.table.DefaultTableModel)queueTable.getModel();
    }

    public java.lang.String getSelectedJob()
    {
        int selectedRow = queueTable.getSelectedRow();
        return getColumnValue(selectedRow, 1);
    }

    public java.lang.String getColumnValue(int row, int col)
    {
        javax.swing.table.DefaultTableModel tableModel = getModel();
        return (java.lang.String)tableModel.getValueAt(row, col);
    }

    public void setColumnValue(int row, int col, java.lang.String value)
    {
        javax.swing.table.DefaultTableModel tableModel = getModel();
        tableModel.setValueAt(value, row, col);
    }

    public void mousePressed(java.awt.event.MouseEvent me)
    {
        java.awt.Point clickPoint = new Point(me.getX(), me.getY());
        int selectedRow = queueTable.rowAtPoint(clickPoint);
        queueTable.setRowSelectionInterval(selectedRow, selectedRow);
        if(me.isPopupTrigger())
            jpopup.show(queueTable, me.getX(), me.getY());
        if(me.getClickCount() == 2)
            logger.info("Double clicked");
    }

    public void mouseClicked(java.awt.event.MouseEvent mouseevent)
    {
    }

    public void mouseReleased(java.awt.event.MouseEvent me)
    {
        if(me.isPopupTrigger())
            mousePressed(me);
    }

    public void mouseEntered(java.awt.event.MouseEvent mouseevent)
    {
    }

    public void mouseExited(java.awt.event.MouseEvent mouseevent)
    {
    }

    public void createButtonsPanel(java.lang.String args[], java.awt.event.ActionListener parent)
    {
        javax.swing.JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(1, 0));
        for(int i = 0; i < args.length; i++)
        {
            javax.swing.JButton newButton = new JButton(args[i]);
            newButton.addActionListener(parent);
            buttonPanel.add(newButton);
        }

        add(buttonPanel, "South");
    }

    public void createCheckBoxPanel(javax.swing.JCheckBox args[])
    {
        javax.swing.JPanel checkBoxPanel = new JPanel();
        for(int i = 0; i < args.length; i++)
            checkBoxPanel.add(args[i]);

        add(checkBoxPanel, "North");
    }

    public void addPopupItems(java.lang.String items[], java.awt.event.ActionListener parent)
    {
        int sep = 0;
        for(int i = 0; i < items.length; i++)
        {
            javax.swing.JMenuItem menuItem = new JMenuItem(items[i]);
            menuItem.addActionListener(parent);
            jpopup.add(menuItem);
            if(++sep == 2)
            {
                jpopup.addSeparator();
                sep = 0;
            }
        }

    }

    public void showRows(java.lang.String status, int col)
    {
        if(status.equals("All"))
            queueTable = completeTable;
        else
            logger.info("Not yet implemented");
    }

    private static org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(org/globus/ogce/beans/filetransfer/gui/monitor/QueuePanel.getName());
    private javax.swing.JTable queueTable;
    private javax.swing.JPopupMenu jpopup;
    javax.swing.JTable completeTable;

}
