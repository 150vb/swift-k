/*
 * RFTPanel.java
 *
 * Created on 2008骞�鏈�7鏃� 涓嬪崍6:21
 */

package org.globus.transfer.reliable.client;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

import org.globus.ogce.beans.filetransfer.gui.monitor.QueuePanel;

import org.globus.transfer.reliable.client.RFTTransferParamPanel.MyFilter;



/**
 *
 * @author  vic
 */
public class RFTPanel extends javax.swing.JPanel {
    private int jobID = 0;
    
    /** Creates new form RFTPanel */
    public RFTPanel() {
        initComponents();
        actionListener = new RFTButtonActionListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rftQueuePanel = new org.globus.ogce.beans.filetransfer.gui.monitor.QueuePanel();
        rftQueuePanel.createHeader(new String[]{"Jobid", "TransferID", "Offset", "From", 
        		"To", "Status", "%", "Errors"});
        rftQueuePanel.addPopupItems(new String[]{"Info", "Cancel", "Delete"}, new ButtonActionListener());
    rFTOptions1 = new RFTOptionsPanel();
    rFTTransferParam1 = new RFTTransferParamPanel();
    startButton = new javax.swing.JButton();
    stopButton = new javax.swing.JButton();
    loadFileButton = new javax.swing.JButton();
    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    finishedField = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    activeField = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    failedField = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    restartedField = new javax.swing.JLabel();
    jLabel9 = new javax.swing.JLabel();
    pendingField = new javax.swing.JLabel();
    jLabel11 = new javax.swing.JLabel();
    cancelledField = new javax.swing.JLabel();

    setAutoscrolls(true);
    setName("Form"); // NOI18N

    rftQueuePanel.setName("rftQueuePanel"); // NOI18N

    rFTOptions1.setName("rFTOptions1"); // NOI18N

    rFTTransferParam1.setName("rFTTransferParam1"); // NOI18N

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.globus.transfer.reliable.client.GridFTPGUIApp.class).getContext().getResourceMap(RFTPanel.class);
    startButton.setText(resourceMap.getString("startButton.text")); // NOI18N
    startButton.setName("startButton"); // NOI18N
    startButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            startButtonActionPerformed(evt);
        }
    });

    stopButton.setText(resourceMap.getString("stopButton.text")); // NOI18N
    stopButton.setName("stopButton"); // NOI18N
    stopButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            stopButtonActionPerformed(evt);
        }
    });

    loadFileButton.setText(resourceMap.getString("restartButton.text")); // NOI18N
    loadFileButton.setName("restartButton"); // NOI18N
    loadFileButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            loadFileButtonActionPerformed(evt);
        }
    });
    
    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
    jPanel1.setName("jPanel1"); // NOI18N

    jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
    jLabel1.setName("jLabel1"); // NOI18N

    finishedField.setText(resourceMap.getString("finishedField.text")); // NOI18N
    finishedField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    finishedField.setName("finishedField"); // NOI18N

    jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
    jLabel3.setName("jLabel3"); // NOI18N

    activeField.setText(resourceMap.getString("activeField.text")); // NOI18N
    activeField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    activeField.setName("activeField"); // NOI18N

    jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
    jLabel5.setName("jLabel5"); // NOI18N

    failedField.setText(resourceMap.getString("failedField.text")); // NOI18N
    failedField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    failedField.setName("failedField"); // NOI18N

    jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
    jLabel7.setName("jLabel7"); // NOI18N

    restartedField.setText(resourceMap.getString("restartedField.text")); // NOI18N
    restartedField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    restartedField.setName("restartedField"); // NOI18N

    jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
    jLabel9.setName("jLabel9"); // NOI18N

    pendingField.setText(resourceMap.getString("pendingField.text")); // NOI18N
    pendingField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    pendingField.setName("pendingField"); // NOI18N

    jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
    jLabel11.setName("jLabel11"); // NOI18N

    cancelledField.setText(resourceMap.getString("cancelledField.text")); // NOI18N
    cancelledField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    cancelledField.setName("cancelledField"); // NOI18N

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(finishedField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(48, 48, 48)
            .add(jLabel3)
            .add(18, 18, 18)
            .add(activeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(60, 60, 60)
            .add(jLabel5)
            .add(45, 45, 45)
            .add(failedField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(40, 40, 40)
            .add(jLabel7)
            .add(28, 28, 28)
            .add(restartedField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(38, 38, 38)
            .add(jLabel9)
            .add(18, 18, 18)
            .add(pendingField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(42, 42, 42)
            .add(jLabel11)
            .add(18, 18, 18)
            .add(cancelledField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(317, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel3)
                .add(finishedField)
                .add(activeField)
                .add(jLabel5)
                .add(failedField)
                .add(jLabel7)
                .add(restartedField)
                .add(jLabel9)
                .add(pendingField)
                .add(jLabel11)
                .add(cancelledField))
            .addContainerGap(21, Short.MAX_VALUE))
    );

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(rftQueuePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1230, Short.MAX_VALUE))
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .add(rFTOptions1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1220, Short.MAX_VALUE)
            .addContainerGap())
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(rFTTransferParam1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1220, Short.MAX_VALUE)
            .addContainerGap())
        .add(layout.createSequentialGroup()
            .add(299, 299, 299)
            .add(startButton)
            .add(58, 58, 58)
            .add(stopButton)
            .add(42, 42, 42)
            .add(loadFileButton)
            .addContainerGap(616, Short.MAX_VALUE))
    );

    layout.linkSize(new java.awt.Component[] {loadFileButton, startButton, stopButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(rftQueuePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 215, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(rFTOptions1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(rFTTransferParam1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(18, 18, 18)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(startButton)
                .add(stopButton)
                .add(loadFileButton))
            .add(92, 92, 92))
    );
    }// </editor-fold>//GEN-END:initComponents

    
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
    	new Thread(new Runnable() {
    		public void run() {
    			RFTTransferParam param = new RFTTransferParam(rFTTransferParam1.getFrom(),
    					rFTTransferParam1.getTo(), rFTTransferParam1.getServerHost(),
    					rFTTransferParam1.getServerPort(), rFTTransferParam1.getAuthType(), rFTTransferParam1.getAuthzType());
    			RFTOptions options = new RFTOptions(rFTOptions1.getBlockSize(), rFTOptions1.getConcurrent(),
    					rFTOptions1.getParallelStream(), rFTOptions1.getTcpBufferSize(), rFTOptions1.getMaxAttempts(),
    					rFTOptions1.getDCAU(), rFTOptions1.getNoTpt(), rFTOptions1.getBinary(),
    					rFTOptions1.getAllOrNone(), rFTOptions1.getDestSN(), rFTOptions1.getSourceSN());
    	        RFTJob job = new RFTJob(++jobID, options, param);
    	        try {
					actionListener.startButtonAction(job, rftQueuePanel);
				} catch (Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage(), "Error",
                            JOptionPane.WARNING_MESSAGE);
                    int index = rftQueuePanel.getRowIndex(Integer.toString(jobID));
                    rftQueuePanel.setColumnValue(index, 5, "Failed");
                    rftQueuePanel.setColumnValue(index, 7, e.getMessage());
					e.printStackTrace();
				}
    		}
    	}).start();
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
    	new Thread(new Runnable() {
    		public void run() {
    			String jobID = rftQueuePanel.getSelectedJob();
    	        try {
					actionListener.stopButtonAction(jobID);
				} catch (Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage(), "Error",
                            JOptionPane.WARNING_MESSAGE);
                    int index = rftQueuePanel.getRowIndex(jobID, 1);
                    rftQueuePanel.setColumnValue(index, 5, "Failed");
                    rftQueuePanel.setColumnValue(index, 7, e.getMessage());
					e.printStackTrace();
				}
    		}
    	}).start();
    }//GEN-LAST:event_stopButtonActionPerformed
    
    private void loadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
    	new Thread(new Runnable() {
    		public void run() {
    	        JFileChooser fileChooser = new JFileChooser(".");
    	        fileChooser.addChoosableFileFilter(new MyFilter());
    	        int status = fileChooser.showDialog(null, "load");
    	        if (status == JFileChooser.APPROVE_OPTION) {
    	        	File transferFile = fileChooser.getSelectedFile();
        			RFTTransferParam param;
        			RFTOptions options;
        			RFTTransferFileParser parser = new RFTTransferFileParser();
					try {
						parser.loadTransferFile(transferFile.getCanonicalPath());
						param = new RFTTransferParam(parser.getTransferType(),
								rFTTransferParam1.getServerHost(),
								rFTTransferParam1.getServerPort(), rFTTransferParam1.getAuthType(), rFTTransferParam1.getAuthzType());
						options = parser.getRFTOptions();
						RFTJob job = new RFTJob(++jobID, options, param);
						actionListener.loadFileButtonAction(job, rftQueuePanel);
					} catch (Exception e) {
						e.printStackTrace();
	                    JOptionPane.showMessageDialog(null,e.getMessage(), "Error",
	                            JOptionPane.WARNING_MESSAGE);
					}        	        
    	        }  
    	        }
    	}).start();
    }//GEN-LAST:event_stopButtonActionPerformed
    
    /**
     * delete a transfer from queue panel and cancel actually transfer
     * @param jobid
     */
    public void deleteTransfer(String jobid) {
    	try {
			actionListener.stopButtonAction(jobid);
		} catch (Exception e) {
			int index = rftQueuePanel.getRowIndex(jobid, 1);
            rftQueuePanel.setColumnValue(index, 5, "Failed");
            rftQueuePanel.setColumnValue(index, 7, e.getMessage());
			e.printStackTrace();
		}
        rftQueuePanel.deleteTransfer(jobid);
    }
    
    /**
     * clear queue panel and cancel all transfer
     */
    public void clear() {
        if (rftQueuePanel.tableSize() > 0) {
            Object aobj[] = {"Yes", "No"};
            int k = JOptionPane.showOptionDialog(null, " Do you wish to clear all the jobs and stop the unfinished jobs ?", "Cancellation Alert", -1, 2, null, aobj, aobj[0]);
            if (k != 1) {


            	int tableSize = rftQueuePanel.tableSize();
            	
            	//cancel all transfer
            	for (int i = 0; i < tableSize; i++) {
            		String jobID = rftQueuePanel.getColumnValue(i, 0);
            		try {
						actionListener.stopButtonAction(jobID);
					} catch (Exception e) {
						int index = rftQueuePanel.getRowIndex(jobID);
	                    rftQueuePanel.setColumnValue(index, 5, "Failed");
	                    rftQueuePanel.setColumnValue(index, 7, e.getMessage());
						e.printStackTrace();
					}
            	}
            	
            	//clear from queue panel
            	rftQueuePanel.clear();
            
        } 
    }
    }
    
    /**
     * update Overall Status Panel of the GUI
     * @param finished
     * @param active
     * @param failed
     * @param retrying
     * @param pending
     * @param cancelled
     */
    public void updateOverallStatus(int finished, int active, int failed, 
    		int retrying, int pending, int cancelled) {
//    	int oldFinished = Integer.valueOf(finishedField.getText());
//    	int oldActive = Integer.valueOf(activeField.getText());
//    	int oldFailed = Integer.valueOf(failedField.getText());
//    	int oldRetrying = Integer.valueOf(restartedField.getText());
//    	int oldPending = Integer.valueOf(pendingField.getText());
//    	int oldCancelled = Integer.valueOf(cancelledField.getText());
    	finishedField.setText(Integer.toString(finished));
    	//activeField.setText(Integer.toString(active + oldActive));
    	activeField.setText(Integer.toString(active));
    	failedField.setText(Integer.toString(failed));
    	restartedField.setText(Integer.toString(retrying));
    	//pendingField.setText(Integer.toString(pending + oldPending));
    	pendingField.setText(Integer.toString(pending));
    	cancelledField.setText(Integer.toString(cancelled));
    }
    
    public QueuePanel getQueuePanel() {
    	return rftQueuePanel;
    }
    
        public static void main(String[] args) {
        Integer i = org.globus.wsrf.security.Constants.SIGNATURE;
    	JFrame frame = new JFrame();
    	RFTPanel panel = new RFTPanel();
    	frame.getContentPane().add(panel);
    	frame.pack();
    	frame.setVisible(true);
    	
    }
        
    
    private RFTButtonActionListener actionListener;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeField;
    private javax.swing.JLabel cancelledField;
    private javax.swing.JLabel failedField;
    private javax.swing.JLabel finishedField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel pendingField;
    private RFTOptionsPanel rFTOptions1;
    private RFTTransferParamPanel rFTTransferParam1;
    private javax.swing.JButton loadFileButton;
    private javax.swing.JLabel restartedField;
    private org.globus.ogce.beans.filetransfer.gui.monitor.QueuePanel rftQueuePanel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
    
    class ButtonActionListener implements ActionListener {
        public void actionPerformed(ActionEvent ae) {
            String actionCommand = ae.getActionCommand();
            if (actionCommand.equals("Save")) {
                Thread saveThread = new Thread() {
                    public void run() {
                        if (rftQueuePanel.tableSize() > 0) {
                            //theApp.saveQueueToFile("rft");
                        }
                    }
                };
                saveThread.start();
            } else if (actionCommand.equals("Load")) {
                Thread loadThread = new Thread() {
                    public void run() {
                        //theApp.loadQueueFromFile("rft");
                    }
                };
                loadThread.start();
            } else if (actionCommand.equals("Stop")) {
                Thread controlThread = new Thread() {
                    public void run() {
                        if (rftQueuePanel.tableSize() > 0) {
                            //theApp.controlExecutionQueue(false, "rft");
                        }
                    }
                };
                controlThread.start();
            } else if (actionCommand.equals("Start")) {
                Thread controlThread = new Thread() {
                    public void run() {
                        if (rftQueuePanel.tableSize() > 0) {
                            //theApp.controlExecutionQueue(true, "rft");
                        }
                    }
                };
                controlThread.start();
            } else if (actionCommand.equals("Clear")) {
                Thread controlThread = new Thread() {
                    public void run() {
                        if (rftQueuePanel.tableSize() > 0) {
                            clear();
                        }
                    }
                };
                controlThread.start();
            } else if (actionCommand.equals("Info")) {
                String job = rftQueuePanel.getSelectedJob();
                int row = rftQueuePanel.getRowIndex(job, 1);
                String msg = "   Job ID : " +
                        rftQueuePanel.getColumnValue(row, 0)
                        + "\n   From : "
                        + rftQueuePanel.getColumnValue(row, 3) +
                        "\n   To : " +
                        rftQueuePanel.getColumnValue(row, 4) +
                        "\n   Status : " +
                        rftQueuePanel.getColumnValue(row, 5)
                        + "\n   Errors : " +
                        rftQueuePanel.getColumnValue(row, 7) +
                        "\n";

                JOptionPane.showMessageDialog(null,
                        msg,
                        "RFT Job Information",
                        JOptionPane.PLAIN_MESSAGE);

            } else if (actionCommand.equals("Cancel")) {
                Thread controlThread = new Thread() {
                    public void run() {
                        String jobID = rftQueuePanel.getSelectedJob();
                        try {
							actionListener.stopButtonAction(jobID);
						} catch (Exception e) {
							JOptionPane.showMessageDialog(null,e.getMessage(), "Error",
		                            JOptionPane.WARNING_MESSAGE);
							int index = rftQueuePanel.getRowIndex(jobID);
		                    rftQueuePanel.setColumnValue(index, 5, "Failed");
		                    rftQueuePanel.setColumnValue(index, 7, e.getMessage());
							e.printStackTrace();
						}
                    }
                };
                controlThread.start();
                
            }  else if (actionCommand.equals("Delete")) {
                String transferID = rftQueuePanel.getSelectedJob();
                int row = rftQueuePanel.getRowIndex(transferID, 1);
                if (!rftQueuePanel.getColumnValue(row, 5).equals("Finished")) {
                    Object aobj[] = {"Yes", "No"};
                    int k = JOptionPane.showOptionDialog(null, " This job is not Finished yet. Do you wish to cancel the job and delete it?", "Deletion Alert", -1, 2, null, aobj, aobj[0]);
                    if (k == 1) {
                        return;
                    } else {
                    	deleteTransfer(transferID);
                    }
                } else {
                	deleteTransfer(transferID);
                }

            }
        }

    }
    
    public class MyFilter extends FileFilter {

        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }

            String extension = getExtension(f);
            if (extension != null) {
                if (extension.equals("xfr")) {
                    return true;
                } else {
                    return false;
                }
            }

            return false;
        }

        public String getDescription() {
            return ".xfr files";
        }

        public String getExtension(File f) {
            String ext = null;
            String s = f.getName();
            int i = s.lastIndexOf('.');

            if (i > 0 && i < s.length() - 1) {
                ext = s.substring(i + 1).toLowerCase();
            }
            return ext;
        }
    }
    
}
